!function(t){function e(t){var e=document.getElementsByTagName("head")[0],n=document.createElement("script");n.type="text/javascript",n.charset="utf-8",n.src=h.p+""+t+"."+v+".hot-update.js",e.appendChild(n)}function n(t){if("undefined"==typeof XMLHttpRequest)return t(new Error("No browser support"));try{var e=new XMLHttpRequest,n=h.p+""+v+".hot-update.json";e.open("GET",n,!0),e.timeout=1e4,e.send(null)}catch(r){return t(r)}e.onreadystatechange=function(){if(4===e.readyState)if(0===e.status)t(new Error("Manifest request to "+n+" timed out."));else if(404===e.status)t();else if(200!==e.status&&304!==e.status)t(new Error("Manifest request to "+n+" failed."));else{try{var r=JSON.parse(e.responseText)}catch(o){return void t(o)}t(null,r)}}}function r(t){var e=C[t];if(!e)return h;var n=function(n){return e.hot.active?C[n]?(C[n].parents.indexOf(t)<0&&C[n].parents.push(t),e.children.indexOf(n)<0&&e.children.push(n)):w=[t]:(console.warn("[HMR] unexpected require("+n+") from disposed module "+t),w=[]),h(n)};for(var r in h)Object.prototype.hasOwnProperty.call(h,r)&&(n[r]=h[r]);return n.e=function(t,e){"ready"===x&&i("prepare"),_++,h.e(t,function(){function r(){_--,"prepare"===x&&(E[t]||u(t),0===_&&0===S&&p())}try{e.call(null,n)}finally{r()}})},n}function o(t){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],active:!0,accept:function(t,n){if("undefined"==typeof t)e._selfAccepted=!0;else if("function"==typeof t)e._selfAccepted=t;else if("object"==typeof t)for(var r=0;r<t.length;r++)e._acceptedDependencies[t[r]]=n;else e._acceptedDependencies[t]=n},decline:function(t){if("undefined"==typeof t)e._selfDeclined=!0;else if("number"==typeof t)e._declinedDependencies[t]=!0;else for(var n=0;n<t.length;n++)e._declinedDependencies[t[n]]=!0},dispose:function(t){e._disposeHandlers.push(t)},addDisposeHandler:function(t){e._disposeHandlers.push(t)},removeDisposeHandler:function(t){var n=e._disposeHandlers.indexOf(t);n>=0&&e._disposeHandlers.splice(n,1)},check:a,apply:l,status:function(t){return t?void k.push(t):x},addStatusHandler:function(t){k.push(t)},removeStatusHandler:function(t){var e=k.indexOf(t);e>=0&&k.splice(e,1)},data:b[t]};return e}function i(t){x=t;for(var e=0;e<k.length;e++)k[e].call(null,t)}function s(t){var e=+t+""===t;return e?+t:t}function a(t,e){if("idle"!==x)throw new Error("check() is only allowed in idle status");"function"==typeof t?(g=!1,e=t):(g=t,e=e||function(t){if(t)throw t}),i("check"),n(function(t,n){if(t)return e(t);if(!n)return i("idle"),void e(null,null);A={},O={},E={};for(var r=0;r<n.c.length;r++)O[n.c[r]]=!0;m=n.h,i("prepare"),d=e,y={};var o=0;u(o),"prepare"===x&&0===_&&0===S&&p()})}function c(t,e){if(O[t]&&A[t]){A[t]=!1;for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(y[n]=e[n]);0===--S&&0===_&&p()}}function u(t){O[t]?(A[t]=!0,S++,e(t)):E[t]=!0}function p(){i("ready");var t=d;if(d=null,t)if(g)l(g,t);else{var e=[];for(var n in y)Object.prototype.hasOwnProperty.call(y,n)&&e.push(s(n));t(null,e)}}function l(e,n){function r(t){for(var e=[t],n={},r=e.slice();r.length>0;){var i=r.pop(),t=C[i];if(t&&!t.hot._selfAccepted){if(t.hot._selfDeclined)return new Error("Aborted because of self decline: "+i);if(0===i)return;for(var s=0;s<t.parents.length;s++){var a=t.parents[s],c=C[a];if(c.hot._declinedDependencies[i])return new Error("Aborted because of declined dependency: "+i+" in "+a);e.indexOf(a)>=0||(c.hot._acceptedDependencies[i]?(n[a]||(n[a]=[]),o(n[a],[i])):(delete n[a],e.push(a),r.push(a)))}}}return[e,n]}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];t.indexOf(r)<0&&t.push(r)}}if("ready"!==x)throw new Error("apply() is only allowed in ready status");"function"==typeof e?(n=e,e={}):e&&"object"==typeof e?n=n||function(t){if(t)throw t}:(e={},n=n||function(t){if(t)throw t});var a={},c=[],u={};for(var p in y)if(Object.prototype.hasOwnProperty.call(y,p)){var l=s(p),f=r(l);if(!f){if(e.ignoreUnaccepted)continue;return i("abort"),n(new Error("Aborted because "+l+" is not accepted"))}if(f instanceof Error)return i("abort"),n(f);u[l]=y[l],o(c,f[0]);for(var l in f[1])Object.prototype.hasOwnProperty.call(f[1],l)&&(a[l]||(a[l]=[]),o(a[l],f[1][l]))}for(var d=[],g=0;g<c.length;g++){var l=c[g];C[l]&&C[l].hot._selfAccepted&&d.push({module:l,errorHandler:C[l].hot._selfAccepted})}i("dispose");for(var k=c.slice();k.length>0;){var l=k.pop(),S=C[l];if(S){for(var _={},E=S.hot._disposeHandlers,A=0;A<E.length;A++){var O=E[A];O(_)}b[l]=_,S.hot.active=!1,delete C[l];for(var A=0;A<S.children.length;A++){var B=C[S.children[A]];if(B){var T=B.parents.indexOf(l);T>=0&&B.parents.splice(T,1)}}}}for(var l in a)if(Object.prototype.hasOwnProperty.call(a,l))for(var S=C[l],P=a[l],A=0;A<P.length;A++){var R=P[A],T=S.children.indexOf(R);T>=0&&S.children.splice(T,1)}i("apply"),v=m;for(var l in u)Object.prototype.hasOwnProperty.call(u,l)&&(t[l]=u[l]);var N=null;for(var l in a)if(Object.prototype.hasOwnProperty.call(a,l)){for(var S=C[l],P=a[l],M=[],g=0;g<P.length;g++){var R=P[g],O=S.hot._acceptedDependencies[R];M.indexOf(O)>=0||M.push(O)}for(var g=0;g<M.length;g++){var O=M[g];try{O(a)}catch(j){N||(N=j)}}}for(var g=0;g<d.length;g++){var L=d[g],l=L.module;w=[l];try{h(l)}catch(j){if("function"==typeof L.errorHandler)try{L.errorHandler(j)}catch(j){N||(N=j)}else N||(N=j)}}return N?(i("fail"),n(N)):(i("idle"),void n(null,c))}function h(e){if(C[e])return C[e].exports;var n=C[e]={exports:{},id:e,loaded:!1,hot:o(e),parents:w,children:[]};return t[e].call(n.exports,n,n.exports,r(e)),n.loaded=!0,n.exports}var f=this.webpackHotUpdate;this.webpackHotUpdate=function(t,e){c(t,e),f&&f(t,e)};var d,y,m,g=!0,v="8385f84f5f5f469206de",b={},w=[],k=[],x="idle",S=0,_=0,E={},A={},O={},C={};return h.m=t,h.c=C,h.p="",h.h=function(){return v},r(0)(0)}([function(t,e,n){n(38),n(73),t.exports=n(26)},function(t,e){function n(t){return t?r(t):void 0}function r(t){for(var e in n.prototype)t[e]=n.prototype[e];return t}t.exports=n,n.prototype.on=n.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks[t]=this._callbacks[t]||[]).push(e),this},n.prototype.once=function(t,e){function n(){r.off(t,n),e.apply(this,arguments)}var r=this;return this._callbacks=this._callbacks||{},n.fn=e,this.on(t,n),this},n.prototype.off=n.prototype.removeListener=n.prototype.removeAllListeners=n.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n=this._callbacks[t];if(!n)return this;if(1==arguments.length)return delete this._callbacks[t],this;for(var r,o=0;o<n.length;o++)if(r=n[o],r===e||r.fn===e){n.splice(o,1);break}return this},n.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks[t];if(n){n=n.slice(0);for(var r=0,o=n.length;o>r;++r)n[r].apply(this,e)}return this},n.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks[t]||[]},n.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,n){(function(t){function r(t,n){var r="b"+e.packets[t.type]+t.data.data;return n(r)}function o(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var o=t.data,i=new Uint8Array(o),s=new Uint8Array(1+o.byteLength);s[0]=g[t.type];for(var a=0;a<i.length;a++)s[a+1]=i[a];return r(s.buffer)}function i(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var o=new FileReader;return o.onload=function(){t.data=o.result,e.encodePacket(t,n,!0,r)},o.readAsArrayBuffer(t.data)}function s(t,n,r){if(!n)return e.encodeBase64Packet(t,r);if(m)return i(t,n,r);var o=new Uint8Array(1);o[0]=g[t.type];var s=new w([o.buffer,t.data]);return r(s)}function a(t,e,n){for(var r=new Array(t.length),o=h(t.length,n),i=function(t,n,o){e(n,function(e,n){r[t]=n,o(e,r)})},s=0;s<t.length;s++)i(s,t[s],o)}var c=n(50),u=n(55),p=n(52),l=n(53),h=n(51),f=n(57),d=navigator.userAgent.match(/Android/i),y=/PhantomJS/i.test(navigator.userAgent),m=d||y;e.protocol=3;var g=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},v=c(g),b={type:"error",data:"parser error"},w=n(54);e.encodePacket=function(e,n,i,a){"function"==typeof n&&(a=n,n=!1),"function"==typeof i&&(a=i,i=null);var c=void 0===e.data?void 0:e.data.buffer||e.data;if(t.ArrayBuffer&&c instanceof ArrayBuffer)return o(e,n,a);if(w&&c instanceof t.Blob)return s(e,n,a);if(c&&c.base64)return r(e,a);var u=g[e.type];return void 0!==e.data&&(u+=i?f.encode(String(e.data)):String(e.data)),a(""+u)},e.encodeBase64Packet=function(n,r){var o="b"+e.packets[n.type];if(w&&n.data instanceof w){var i=new FileReader;return i.onload=function(){var t=i.result.split(",")[1];r(o+t)},i.readAsDataURL(n.data)}var s;try{s=String.fromCharCode.apply(null,new Uint8Array(n.data))}catch(a){for(var c=new Uint8Array(n.data),u=new Array(c.length),p=0;p<c.length;p++)u[p]=c[p];s=String.fromCharCode.apply(null,u)}return o+=t.btoa(s),r(o)},e.decodePacket=function(t,n,r){if("string"==typeof t||void 0===t){if("b"==t.charAt(0))return e.decodeBase64Packet(t.substr(1),n);if(r)try{t=f.decode(t)}catch(o){return b}var i=t.charAt(0);return Number(i)==i&&v[i]?t.length>1?{type:v[i],data:t.substring(1)}:{type:v[i]}:b}var s=new Uint8Array(t),i=s[0],a=p(t,1);return w&&"blob"===n&&(a=new w([a])),{type:v[i],data:a}},e.decodeBase64Packet=function(e,n){var r=v[e.charAt(0)];if(!t.ArrayBuffer)return{type:r,data:{base64:!0,data:e.substr(1)}};var o=l.decode(e.substr(1));return"blob"===n&&w&&(o=new w([o])),{type:r,data:o}},e.encodePayload=function(t,n,r){function o(t){return t.length+":"+t}function i(t,r){e.encodePacket(t,s?n:!1,!0,function(t){r(null,o(t))})}"function"==typeof n&&(r=n,n=null);var s=u(t);return n&&s?w&&!m?e.encodePayloadAsBlob(t,r):e.encodePayloadAsArrayBuffer(t,r):t.length?void a(t,i,function(t,e){return r(e.join(""))}):r("0:")},e.decodePayload=function(t,n,r){if("string"!=typeof t)return e.decodePayloadAsBinary(t,n,r);"function"==typeof n&&(r=n,n=null);var o;if(""==t)return r(b,0,1);for(var i,s,a="",c=0,u=t.length;u>c;c++){var p=t.charAt(c);if(":"!=p)a+=p;else{if(""==a||a!=(i=Number(a)))return r(b,0,1);if(s=t.substr(c+1,i),a!=s.length)return r(b,0,1);if(s.length){if(o=e.decodePacket(s,n,!0),b.type==o.type&&b.data==o.data)return r(b,0,1);var l=r(o,c+i,u);if(!1===l)return}c+=i,a=""}}return""!=a?r(b,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,n){function r(t,n){e.encodePacket(t,!0,!0,function(t){return n(null,t)})}return t.length?void a(t,r,function(t,e){var r=e.reduce(function(t,e){var n;return n="string"==typeof e?e.length:e.byteLength,t+n.toString().length+n+2},0),o=new Uint8Array(r),i=0;return e.forEach(function(t){var e="string"==typeof t,n=t;if(e){for(var r=new Uint8Array(t.length),s=0;s<t.length;s++)r[s]=t.charCodeAt(s);n=r.buffer}e?o[i++]=0:o[i++]=1;for(var a=n.byteLength.toString(),s=0;s<a.length;s++)o[i++]=parseInt(a[s]);o[i++]=255;for(var r=new Uint8Array(n),s=0;s<r.length;s++)o[i++]=r[s]}),n(o.buffer)}):n(new ArrayBuffer(0))},e.encodePayloadAsBlob=function(t,n){function r(t,n){e.encodePacket(t,!0,!0,function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var r=new Uint8Array(t.length),o=0;o<t.length;o++)r[o]=t.charCodeAt(o);t=r.buffer,e[0]=0}for(var i=t instanceof ArrayBuffer?t.byteLength:t.size,s=i.toString(),a=new Uint8Array(s.length+1),o=0;o<s.length;o++)a[o]=parseInt(s[o]);if(a[s.length]=255,w){var c=new w([e.buffer,a.buffer,t]);n(null,c)}})}a(t,r,function(t,e){return n(new w(e))})},e.decodePayloadAsBinary=function(t,n,r){"function"==typeof n&&(r=n,n=null);for(var o=t,i=[],s=!1;o.byteLength>0;){for(var a=new Uint8Array(o),c=0===a[0],u="",l=1;255!=a[l];l++){if(u.length>310){s=!0;break}u+=a[l]}if(s)return r(b,0,1);o=p(o,2+u.length),u=parseInt(u);var h=p(o,0,u);if(c)try{h=String.fromCharCode.apply(null,new Uint8Array(h))}catch(f){var d=new Uint8Array(h);h="";for(var l=0;l<d.length;l++)h+=String.fromCharCode(d[l])}i.push(h),o=p(o,u)}var y=i.length;i.forEach(function(t,o){r(e.decodePacket(t,n,!0),o,y)})}}).call(e,function(){return this}())},function(t,e){function n(t){return n.enabled(t)?function(e){e=r(e);var o=new Date,i=o-(n[t]||o);n[t]=o,e=t+" "+e+" +"+n.humanize(i),window.console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}:function(){}}function r(t){return t instanceof Error?t.stack||t.message:t}t.exports=n,n.names=[],n.skips=[],n.enable=function(t){try{localStorage.debug=t}catch(e){}for(var r=(t||"").split(/[\s,]+/),o=r.length,i=0;o>i;i++)t=r[i].replace("*",".*?"),"-"===t[0]?n.skips.push(new RegExp("^"+t.substr(1)+"$")):n.names.push(new RegExp("^"+t+"$"))},n.disable=function(){n.enable("")},n.humanize=function(t){var e=1e3,n=6e4,r=60*n;return t>=r?(t/r).toFixed(1)+"h":t>=n?(t/n).toFixed(1)+"m":t>=e?(t/e|0)+"s":t+"ms"},n.enabled=function(t){for(var e=0,r=n.skips.length;r>e;e++)if(n.skips[e].test(t))return!1;for(var e=0,r=n.names.length;r>e;e++)if(n.names[e].test(t))return!0;return!1};try{window.localStorage&&n.enable(localStorage.debug)}catch(o){}},function(t,e){t.exports=function(t,e){var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){function r(){return"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31}function o(){var t=arguments,n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),!n)return t;var r="color: "+this.color;t=[t[0],r,"color: inherit"].concat(Array.prototype.slice.call(t,1));var o=0,i=0;return t[0].replace(/%[a-z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))}),t.splice(i,0,r),t}function i(){return"object"==typeof console&&"function"==typeof console.log&&Function.prototype.apply.call(console.log,console,arguments)}function s(t){try{null==t?localStorage.removeItem("debug"):localStorage.debug=t}catch(e){}}function a(){var t;try{t=localStorage.debug}catch(e){}return t}e=t.exports=n(48),e.log=i,e.formatArgs=o,e.save=s,e.load=a,e.useColors=r,e.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],e.formatters.j=function(t){return JSON.stringify(t)},e.enable(a())},function(t,e,n){e=t.exports=n(32)(),e.push([t.id,"html{color:#fff;background:#222;line-height:1.5}.root{display:flex;justify-content:center;align-items:center;flex-direction:column}.who{text-align:center}.content{width:25pc;margin:15px auto;background:#535394;padding:20px;display:flex}",""])},function(t,e,n){function r(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized}var o=n(2),i=n(1);t.exports=r,i(r.prototype),r.timestamps=0,r.prototype.onError=function(t,e){var n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this},r.prototype.open=function(){return("closed"==this.readyState||""==this.readyState)&&(this.readyState="opening",this.doOpen()),this},r.prototype.close=function(){return("opening"==this.readyState||"open"==this.readyState)&&(this.doClose(),this.onClose()),this},r.prototype.send=function(t){if("open"!=this.readyState)throw new Error("Transport not open");this.write(t)},r.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},r.prototype.onData=function(t){var e=o.decodePacket(t,this.socket.binaryType);this.onPacket(e)},r.prototype.onPacket=function(t){this.emit("packet",t)},r.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(t,e,n){var r=n(58);t.exports=function(t){var e=t.xdomain,n=t.xscheme,o=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||r))return new XMLHttpRequest}catch(i){}try{if("undefined"!=typeof XDomainRequest&&!n&&o)return new XDomainRequest}catch(i){}if(!e)try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(i){}}},function(t,e){e.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split("&"),r=0,o=n.length;o>r;r++){var i=n[r].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}},function(t,e,n){function r(){}function o(t){var n="",r=!1;return n+=t.type,(e.BINARY_EVENT==t.type||e.BINARY_ACK==t.type)&&(n+=t.attachments,n+="-"),t.nsp&&"/"!=t.nsp&&(r=!0,n+=t.nsp),null!=t.id&&(r&&(n+=",",r=!1),n+=t.id),null!=t.data&&(r&&(n+=","),n+=l.stringify(t.data)),p("encoded %j as %s",t,n),n}function i(t,e){function n(t){var n=f.deconstructPacket(t),r=o(n.packet),i=n.buffers;i.unshift(r),e(i)}f.removeBlobs(t,n)}function s(){this.reconstructor=null}function a(t){var n={},r=0;if(n.type=Number(t.charAt(0)),null==e.types[n.type])return u();if(e.BINARY_EVENT==n.type||e.BINARY_ACK==n.type){for(var o="";"-"!=t.charAt(++r)&&(o+=t.charAt(r),r!=t.length););if(o!=Number(o)||"-"!=t.charAt(r))throw new Error("Illegal attachments");n.attachments=Number(o)}if("/"==t.charAt(r+1))for(n.nsp="";++r;){var i=t.charAt(r);if(","==i)break;if(n.nsp+=i,r==t.length)break}else n.nsp="/";var s=t.charAt(r+1);if(""!==s&&Number(s)==s){for(n.id="";++r;){var i=t.charAt(r);if(null==i||Number(i)!=i){--r;break}if(n.id+=t.charAt(r),r==t.length)break}n.id=Number(n.id)}if(t.charAt(++r))try{n.data=l.parse(t.substr(r))}catch(a){return u()}return p("decoded %s as %j",t,n),n}function c(t){this.reconPack=t,this.buffers=[]}function u(t){return{type:e.ERROR,data:"parser error"}}var p=n(3)("socket.io-parser"),l=n(68),h=(n(21),n(1)),f=n(67),d=n(20);e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","BINARY_EVENT","ACK","BINARY_ACK","ERROR"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=r,e.Decoder=s,r.prototype.encode=function(t,n){if(p("encoding packet %j",t),e.BINARY_EVENT==t.type||e.BINARY_ACK==t.type)i(t,n);else{var r=o(t);n([r])}},h(s.prototype),s.prototype.add=function(t){var n;if("string"==typeof t)n=a(t),e.BINARY_EVENT==n.type||e.BINARY_ACK==n.type?(this.reconstructor=new c(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!d(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");n=this.reconstructor.takeBinaryData(t),n&&(this.reconstructor=null,this.emit("decoded",n))}},s.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},c.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length==this.reconPack.attachments){var e=f.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},c.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(t,e,n){(function(e){"use strict";var n=function(t,n,r,o,i,s,a,c){if("production"!==e.env.NODE_ENV&&void 0===n)throw new Error("invariant requires an error message argument");if(!t){var u;if(void 0===n)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var p=[r,o,i,s,a,c],l=0;u=new Error("Invariant Violation: "+n.replace(/%s/g,function(){return p[l++]}))}throw u.framesToPop=1,u}};t.exports=n}).call(e,n(75))},function(t,e,n){function r(t,e){return this instanceof r?(t&&"object"==typeof t&&(e=t,t=void 0),e=e||{},e.path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(e.reconnection!==!1),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new h({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connected=[],this.encoding=!1,this.packetBuffer=[],this.encoder=new a.Encoder,this.decoder=new a.Decoder,this.autoConnect=e.autoConnect!==!1,void(this.autoConnect&&this.open())):new r(t,e)}var o=(n(15),n(42)),i=n(14),s=n(1),a=n(10),c=n(13),u=n(16),p=(n(65),n(3)("socket.io-client:manager")),l=n(19),h=n(41);t.exports=r,r.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var t in this.nsps)this.nsps[t].emit.apply(this.nsps[t],arguments)},r.prototype.updateSocketIds=function(){for(var t in this.nsps)this.nsps[t].id=this.engine.id},s(r.prototype),r.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},r.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},r.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},r.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},r.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},r.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},r.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},r.prototype.open=r.prototype.connect=function(t){if(p("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;p("opening %s",this.uri),this.engine=o(this.uri,this.opts);var e=this.engine,n=this;this.readyState="opening",this.skipReconnect=!1;var r=c(e,"open",function(){n.onopen(),t&&t()}),i=c(e,"error",function(e){if(p("connect_error"),n.cleanup(),n.readyState="closed",n.emitAll("connect_error",e),t){var r=new Error("Connection error");r.data=e,t(r)}else n.maybeReconnectOnOpen()});if(!1!==this._timeout){var s=this._timeout;p("connect attempt will timeout after %d",s);var a=setTimeout(function(){p("connect attempt timed out after %d",s),r.destroy(),e.close(),e.emit("error","timeout"),n.emitAll("connect_timeout",s)},s);this.subs.push({destroy:function(){clearTimeout(a)}})}return this.subs.push(r),this.subs.push(i),this},r.prototype.onopen=function(){p("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(c(t,"data",u(this,"ondata"))),this.subs.push(c(this.decoder,"decoded",u(this,"ondecoded"))),this.subs.push(c(t,"error",u(this,"onerror"))),this.subs.push(c(t,"close",u(this,"onclose")))},r.prototype.ondata=function(t){this.decoder.add(t)},r.prototype.ondecoded=function(t){this.emit("packet",t)},r.prototype.onerror=function(t){p("error",t),this.emitAll("error",t)},r.prototype.socket=function(t){var e=this.nsps[t];if(!e){e=new i(this,t),this.nsps[t]=e;var n=this;e.on("connect",function(){e.id=n.engine.id,~l(n.connected,e)||n.connected.push(e)})}return e},r.prototype.destroy=function(t){var e=l(this.connected,t);~e&&this.connected.splice(e,1),this.connected.length||this.close()},r.prototype.packet=function(t){p("writing packet %j",t);var e=this;e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,function(t){for(var n=0;n<t.length;n++)e.engine.write(t[n]);e.encoding=!1,e.processPacketQueue()}))},r.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},r.prototype.cleanup=function(){for(var t;t=this.subs.shift();)t.destroy();this.packetBuffer=[],this.encoding=!1,this.decoder.destroy()},r.prototype.close=r.prototype.disconnect=function(){this.skipReconnect=!0,this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},r.prototype.onclose=function(t){p("close"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},r.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)p("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();p("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var n=setTimeout(function(){t.skipReconnect||(p("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open(function(e){e?(p("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(p("reconnect success"),t.onreconnect())}))},e);this.subs.push({destroy:function(){clearTimeout(n)}})}},r.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)}},function(t,e){function n(t,e,n){return t.on(e,n),{destroy:function(){t.removeListener(e,n)}}}t.exports=n},function(t,e,n){function r(t,e){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.io.autoConnect&&this.open(),this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0}var o=n(10),i=n(1),s=n(69),a=n(13),c=n(16),u=n(3)("socket.io-client:socket"),p=n(63);t.exports=e=r;var l={connect:1,connect_error:1,connect_timeout:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1},h=i.prototype.emit;i(r.prototype),r.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[a(t,"open",c(this,"onopen")),a(t,"packet",c(this,"onpacket")),a(t,"close",c(this,"onclose"))]}},r.prototype.open=r.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"==this.io.readyState&&this.onopen(),this)},r.prototype.send=function(){var t=s(arguments);return t.unshift("message"),this.emit.apply(this,t),this},r.prototype.emit=function(t){if(l.hasOwnProperty(t))return h.apply(this,arguments),this;var e=s(arguments),n=o.EVENT;p(e)&&(n=o.BINARY_EVENT);var r={type:n,data:e};return"function"==typeof e[e.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),r.id=this.ids++),this.connected?this.packet(r):this.sendBuffer.push(r),this},r.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},r.prototype.onopen=function(){u("transport is open - connecting"),"/"!=this.nsp&&this.packet({type:o.CONNECT})},r.prototype.onclose=function(t){u("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},r.prototype.onpacket=function(t){if(t.nsp==this.nsp)switch(t.type){case o.CONNECT:this.onconnect();break;case o.EVENT:this.onevent(t);break;case o.BINARY_EVENT:this.onevent(t);break;case o.ACK:this.onack(t);break;case o.BINARY_ACK:this.onack(t);break;case o.DISCONNECT:this.ondisconnect();break;case o.ERROR:this.emit("error",t.data)}},r.prototype.onevent=function(t){var e=t.data||[];u("emitting event %j",e),null!=t.id&&(u("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?h.apply(this,e):this.receiveBuffer.push(e)},r.prototype.ack=function(t){var e=this,n=!1;return function(){if(!n){n=!0;var r=s(arguments);u("sending ack %j",r);var i=p(r)?o.BINARY_ACK:o.ACK;e.packet({type:i,id:t,data:r})}}},r.prototype.onack=function(t){u("calling ack %s with %j",t.id,t.data);var e=this.acks[t.id];e.apply(this,t.data),delete this.acks[t.id]},r.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},r.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)h.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},r.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},r.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},r.prototype.close=r.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:o.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}},function(t,e,n){(function(e){function r(t,n){var r=t,n=n||e.location;return null==t&&(t=n.protocol+"//"+n.host),"string"==typeof t&&("/"==t.charAt(0)&&(t="/"==t.charAt(1)?n.protocol+t:n.hostname+t),/^(https?|wss?):\/\//.test(t)||(i("protocol-less url %s",t),t="undefined"!=typeof n?n.protocol+"//"+t:"https://"+t),i("parse %s",t),r=o(t)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/",r.id=r.protocol+"://"+r.host+":"+r.port,r.href=r.protocol+"://"+r.host+(n&&n.port==r.port?"":":"+r.port),r}var o=n(66),i=n(3)("socket.io-client:url");t.exports=r}).call(e,function(){return this}())},function(t,e){var n=[].slice;t.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return e.apply(t,r.concat(n.call(arguments)))}}},function(t,e,n){(function(t){function r(e){var n,r=!1,a=!1,c=!1!==e.jsonp;if(t.location){var u="https:"==location.protocol,p=location.port;p||(p=u?443:80),r=e.hostname!=location.hostname||p!=e.port,a=e.secure!=u}if(e.xdomain=r,e.xscheme=a,n=new o(e),"open"in n&&!e.forceJSONP)return new i(e);if(!c)throw new Error("JSONP disabled");return new s(e)}var o=n(8),i=n(46),s=n(45),a=n(47);e.polling=r,e.websocket=a}).call(e,function(){return this}())},function(t,e,n){function r(t){var e=t&&t.forceBase64;(!u||e)&&(this.supportsBinary=!1),o.call(this,t)}var o=n(7),i=n(9),s=n(2),a=n(4),c=n(5)("engine.io-client:polling");t.exports=r;var u=function(){var t=n(8),e=new t({xdomain:!1});return null!=e.responseType}();a(r,o),r.prototype.name="polling",r.prototype.doOpen=function(){this.poll()},r.prototype.pause=function(t){function e(){c("paused"),n.readyState="paused",t()}var n=this;if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(c("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){c("pre-pause polling complete"),--r||e()})),this.writable||(c("we are currently writing - waiting to pause"),r++,this.once("drain",function(){c("pre-pause writing complete"),--r||e()}))}else e()},r.prototype.poll=function(){c("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},r.prototype.onData=function(t){var e=this;c("polling got data %s",t);var n=function(t,n,r){return"opening"==e.readyState&&e.onOpen(),"close"==t.type?(e.onClose(),!1):void e.onPacket(t)};s.decodePayload(t,this.socket.binaryType,n),"closed"!=this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"==this.readyState?this.poll():c('ignoring poll - transport state "%s"',this.readyState))},r.prototype.doClose=function(){function t(){c("writing close packet"),e.write([{type:"close"}])}var e=this;"open"==this.readyState?(c("transport open - closing"),t()):(c("transport not open - deferring close"),this.once("open",t))},r.prototype.write=function(t){var e=this;this.writable=!1;var n=function(){e.writable=!0,e.emit("drain")},e=this;s.encodePayload(t,this.supportsBinary,function(t){e.doWrite(t,n)})},r.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(t[this.timestampParam]=+new Date+"-"+o.timestamps++),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.port&&("https"==e&&443!=this.port||"http"==e&&80!=this.port)&&(n=":"+this.port),t.length&&(t="?"+t),e+"://"+this.hostname+n+this.path+t}},function(t,e){var n=[].indexOf;t.exports=function(t,e){if(n)return t.indexOf(e);
for(var r=0;r<t.length;++r)if(t[r]===e)return r;return-1}},function(t,e){(function(e){function n(t){return e.Buffer&&e.Buffer.isBuffer(t)||e.ArrayBuffer&&t instanceof ArrayBuffer}t.exports=n}).call(e,function(){return this}())},function(t,e){t.exports=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e){t.exports=_},function(t,e,n){var r,o,i,s,a;a=React.DOM,o=a.div,i=a.h1,s=a.p,r=React.createFactory(n(27)),t.exports=React.createClass({displayName:"App",childContextTypes:{shortcuts:React.PropTypes.object.isRequired},componentDidMount:function(){return console.log(this.props.shortcuts.getAllShortcuts())},getInitialState:function(){return{who:"Keymap definition is in your console.",unmount:!1}},getChildContext:function(){return{shortcuts:this.props.shortcuts}},_mountIt:function(){return this.setState({unmount:!1})},_handleShortcuts:function(t){switch(t){case"MOVE_LEFT":return this.setState({who:"Hemingway - left"});case"DELETE":return this.setState({who:"Hemingway - delete"});case"MOVE_RIGHT":return this.setState({who:"Hemingway - right"});case"MOVE_UP":return this.setState({who:"Hemingway - top"});case"UNMOUNT":return this.setState({unmount:!0})}},_handleShortcuts2:function(t){switch(t){case"MOVE_LEFT":return this.setState({who:"Franz Kafka - left"});case"DELETE":return this.setState({who:"Franz Kafka - delete"});case"MOVE_RIGHT":return this.setState({who:"Franz Kafka - right"});case"MOVE_UP":return this.setState({who:"Franz Kafka - top"})}},_handleRoot:function(t){return this.setState({who:"Root shortcuts component"})},render:function(){return this.state.unmount?i({onClick:this._mountIt,className:"who"},"Unmounted!"):o({className:"root"},i({className:"who"},this.state.who),r({name:this.constructor.displayName,handler:this._handleShortcuts,className:"content"},o(null,i(null,"Hemingway"),s(null,"Far far away, behind the word mountains, far from the countries Vokalia and Consonantia, there live the blind texts. Separated they live in Bookmarksgrove right at the coast of the Semantics, a large language ocean. A small river named Duden flows by their place and supplies it with the necessary regelialia."))),r({name:this.constructor.displayName,handler:this._handleShortcuts2,className:"content"},o(null,i(null,"Franz Kafka"),s(null,"One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by arches into stiff sections."))))}})},function(t,e){t.exports={App:{MOVE_LEFT:"left",MOVE_RIGHT:"right",MOVE_UP:["up","w"],DELETE:{osx:["command+backspace","k"],windows:"delete",linux:"delete"},UNMOUNT:"esc"}}},function(t,e,n){var r,o,i,s,a;n(37),s=n(25),r=n(24),o=n(30),a=new o(s),window.shortcutManager=a,i=React.createElement(r,{shortcuts:a}),React.render(i,document.getElementById("app"))},function(t,e,n){t.exports=n(28)},function(t,e,n){var r,o,i,s,a;r=n(76),o=n(23),i=n(11),s=n(34),a=r.createFactory("shortcuts"),t.exports=r.createClass({displayName:"Shortcuts",contextTypes:{shortcuts:r.PropTypes.object.isRequired},propTypes:{handler:r.PropTypes.func.isRequired,name:r.PropTypes.string.isRequired,element:r.PropTypes.func,tabIndex:r.PropTypes.number,className:r.PropTypes.string,eventType:r.PropTypes.string,stopPropagation:r.PropTypes.bool,trigger:r.PropTypes.string},getDefaultProps:function(){return{element:null,tabIndex:null,className:null,eventType:null,stopPropagation:null,trigger:null}},_bindShortcuts:function(t){var e;return this.props.trigger?(e=document.querySelector(this.props.trigger),i(e,"Trigger DOM node was not found."),e.setAttribute("tabindex",this.props.tabIndex||-1)):e=r.findDOMNode(this.refs.shortcuts),s(e).bind(t,this._handleShortcuts,this.props.eventType)},_unbindShortcuts:function(t){var e;return this.props.trigger?(e=document.querySelector(this.props.trigger),e.removeAttribute("tabindex")):e=r.findDOMNode(this.refs.shortcuts),s(e).unbind(t)},_onUpdate:function(){var t;return t=this.context.shortcuts.getShortcuts(this.props.name),this._unbindShortcuts(t),this._bindShortcuts(t)},componentDidMount:function(){var t;return t=this.context.shortcuts.getShortcuts(this.props.name),this._bindShortcuts(t),this.context.shortcuts.addUpdateListener(this._onUpdate)},componentWillUnmount:function(){var t;return t=this.context.shortcuts.getShortcuts(this.props.name),this._unbindShortcuts(t),this.context.shortcuts.removeUpdateListener(this._onUpdate)},_handleShortcuts:function(t,e){var n;return t.preventDefault(),this.props.stopPropagation&&t.stopPropagation(),n=this.context.shortcuts.findShortcutName(e,this.props.name),this.props.handler(n)},render:function(){var t;return t=a,o.isFunction(this.props.element)&&(t=this.props.element),t({tabIndex:this.props.tabIndex||-1,className:this.props.className,ref:"shortcuts"},this.props.children)}})},function(t,e,n){var r,o;o=n(35),r=function(){var t;return t=o.os.family,t=t.toLowerCase().replace(/ /g,""),/\bwin/.test(t)?t="windows":/darwin/.test(t)?t="osx":/freebsd|sunos/.test(t)&&(t="linux"),t},t.exports={getPlatformName:r}},function(t,e,n){t.exports=n(31)},function(t,e,n){var r,o,i,s,a,c=function(t,e){function n(){this.constructor=t}for(var r in e)u.call(e,r)&&(t[r]=e[r]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},u={}.hasOwnProperty;i=n(23),a=n(11),r=n(33).EventEmitter,s=n(29),o=function(t){function e(t){null==t&&(t={}),this._keymap=t}return c(e,t),e.CHANGE_EVENT="shortcuts:update",e.prototype.addUpdateListener=function(t){return a(t,"addUpdateListener: callback argument is not defined or falsy"),this.on(e.CHANGE_EVENT,t)},e.prototype.removeUpdateListener=function(t){return this.removeListener(e.CHANGE_EVENT,t)},e.prototype._platformName=s.getPlatformName(),e.prototype._parseShortcutDescriptor=function(t){return i.isPlainObject(t)?i.get(t,this._platformName):t},e.prototype.setKeymap=function(t){return a(t,"setKeymap: keymap argument is not defined or falsy."),this._keymap=t,this.emit(e.CHANGE_EVENT)},e.prototype.getAllShortcuts=function(){return this._keymap},e.prototype.getShortcuts=function(t){var e,n,r;return a(t,"getShortcuts: name argument is not defined or falsy."),n=this._keymap[t],a(n,"getShortcuts: There are no shortcuts with name "+t+"."),e=this._parseShortcutDescriptor.bind(this),r=i(n).map(e).flatten().value()},e.prototype._parseShortcutKeyName=function(t,e){var n;return n=i.findKey(t,function(t){return function(n){var r;return i.isPlainObject(n)&&(n=i.get(n,t._platformName)),i.isArray(n)&&(r=n.indexOf(e),r>=0&&(n=n[r])),n===e}}(this))},e.prototype.findShortcutName=function(t,e){var n,r;return a(t,"findShortcutName: keyName argument is not defined or falsy."),a(e,"findShortcutName: componentName argument is not defined or falsy."),n=this._keymap[e],r=this._parseShortcutKeyName(n,t)},e}(r),t.exports=o},function(t,e){t.exports=function(){var t=[];return t.toString=function(){for(var t=[],e=0;e<this.length;e++){var n=this[e];n[2]?t.push("@media "+n[2]+"{"+n[1]+"}"):t.push(n[1])}return t.join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var s=e[o];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),t.push(s))}},t}},function(t,e){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function r(t){return"function"==typeof t}function o(t){return"number"==typeof t}function i(t){return"object"==typeof t&&null!==t}function s(t){return void 0===t}t.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(t){if(!o(t)||0>t||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},n.prototype.emit=function(t){var e,n,o,a,c,u;if(this._events||(this._events={}),"error"===t&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if(e=arguments[1],e instanceof Error)throw e;throw TypeError('Uncaught, unspecified "error" event.')}if(n=this._events[t],s(n))return!1;if(r(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:for(o=arguments.length,a=new Array(o-1),c=1;o>c;c++)a[c-1]=arguments[c];n.apply(this,a)}else if(i(n)){for(o=arguments.length,a=new Array(o-1),c=1;o>c;c++)a[c-1]=arguments[c];for(u=n.slice(),o=u.length,c=0;o>c;c++)u[c].apply(this,a)}return!0},n.prototype.addListener=function(t,e){var o;if(!r(e))throw TypeError("listener must be a function");if(this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,r(e.listener)?e.listener:e),this._events[t]?i(this._events[t])?this._events[t].push(e):this._events[t]=[this._events[t],e]:this._events[t]=e,i(this._events[t])&&!this._events[t].warned){var o;o=s(this._maxListeners)?n.defaultMaxListeners:this._maxListeners,o&&o>0&&this._events[t].length>o&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace())}return this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(t,e){function n(){this.removeListener(t,n),o||(o=!0,e.apply(this,arguments))}if(!r(e))throw TypeError("listener must be a function");var o=!1;return n.listener=e,this.on(t,n),this},n.prototype.removeListener=function(t,e){var n,o,s,a;if(!r(e))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(n=this._events[t],s=n.length,o=-1,n===e||r(n.listener)&&n.listener===e)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,e);else if(i(n)){for(a=s;a-->0;)if(n[a]===e||n[a].listener&&n[a].listener===e){o=a;break}if(0>o)return this;1===n.length?(n.length=0,delete this._events[t]):n.splice(o,1),this._events.removeListener&&this.emit("removeListener",t,e)}return this},n.prototype.removeAllListeners=function(t){var e,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(e in this._events)"removeListener"!==e&&this.removeAllListeners(e);return this.removeAllListeners("removeListener"),this._events={},this}if(n=this._events[t],r(n))this.removeListener(t,n);else for(;n.length;)this.removeListener(t,n[n.length-1]);return delete this._events[t],this},n.prototype.listeners=function(t){var e;return e=this._events&&this._events[t]?r(this._events[t])?[this._events[t]]:this._events[t].slice():[]},n.listenerCount=function(t,e){var n;return n=t._events&&t._events[e]?r(t._events[e])?1:t._events[e].length:0}},function(t,e,n){var r;!function(o,i,s){function a(t,e,n){return t.addEventListener?void t.addEventListener(e,n,!1):void t.attachEvent("on"+e,n)}function c(t){if("keypress"==t.type){var e=String.fromCharCode(t.which);return t.shiftKey||(e=e.toLowerCase()),e}return k[t.which]?k[t.which]:x[t.which]?x[t.which]:String.fromCharCode(t.which).toLowerCase()}function u(t,e){return t.sort().join(",")===e.sort().join(",")}function p(t){var e=[];return t.shiftKey&&e.push("shift"),t.altKey&&e.push("alt"),t.ctrlKey&&e.push("ctrl"),t.metaKey&&e.push("meta"),e}function l(t){return t.preventDefault?void t.preventDefault():void(t.returnValue=!1)}function h(t){return t.stopPropagation?void t.stopPropagation():void(t.cancelBubble=!0)}function f(t){return"shift"==t||"ctrl"==t||"alt"==t||"meta"==t}function d(){if(!w){w={};for(var t in k)t>95&&112>t||k.hasOwnProperty(t)&&(w[k[t]]=t)}return w}function y(t,e,n){return n||(n=d()[t]?"keydown":"keypress"),"keypress"==n&&e.length&&(n="keydown"),n}function m(t){return"+"===t?["+"]:(t=t.replace(/\+{2}/g,"+plus"),t.split("+"))}function g(t,e){var n,r,o,i=[];for(n=m(t),o=0;o<n.length;++o)r=n[o],_[r]&&(r=_[r]),e&&"keypress"!=e&&S[r]&&(r=S[r],i.push("shift")),f(r)&&i.push(r);return e=y(r,i,e),{key:r,modifiers:i,action:e}}function v(t,e){return null===t||t===i?!1:t===e?!0:v(t.parentNode,e)}function b(t){function e(t){t=t||{};var e,n=!1;for(e in w)t[e]?n=!0:w[e]=0;n||(S=!1)}function n(t,e,n,r,o,i){var s,a,c=[],p=n.type;if(!m._callbacks[t])return[];for("keyup"==p&&f(t)&&(e=[t]),s=0;s<m._callbacks[t].length;++s)if(a=m._callbacks[t][s],(r||!a.seq||w[a.seq]==a.level)&&p==a.action&&("keypress"==p&&!n.metaKey&&!n.ctrlKey||u(e,a.modifiers))){var l=!r&&a.combo==o,h=r&&a.seq==r&&a.level==i;(l||h)&&m._callbacks[t].splice(s,1),c.push(a)}return c}function r(t,e,n,r){m.stopCallback(e,e.target||e.srcElement,n,r)||t(e,n)===!1&&(l(e),h(e))}function o(t){"number"!=typeof t.which&&(t.which=t.keyCode);var e=c(t);if(e)return"keyup"==t.type&&k===e?void(k=!1):void m.handleKey(e,p(t),t)}function s(){clearTimeout(v),v=setTimeout(e,1e3)}function d(t,n,o,i){function a(e){return function(){S=e,++w[t],s()}}function u(n){r(o,n,t),"keyup"!==i&&(k=c(n)),setTimeout(e,10)}w[t]=0;for(var p=0;p<n.length;++p){var l=p+1===n.length,h=l?u:a(i||g(n[p+1]).action);y(n[p],h,i,t,p)}}function y(t,e,r,o,i){m._directMap[t+":"+r]=e,t=t.replace(/\s+/g," ");var s,a=t.split(" ");return a.length>1?void d(t,a,e,r):(s=g(t,r),m._callbacks[s.key]=m._callbacks[s.key]||[],n(s.key,s.modifiers,{type:s.action},o,t,i),void m._callbacks[s.key][o?"unshift":"push"]({callback:e,modifiers:s.modifiers,action:s.action,seq:o,level:i,combo:t}))}var m=this;if(t=t||i,!(m instanceof b))return new b(t);m.target=t,m._callbacks={},m._directMap={};var v,w={},k=!1,x=!1,S=!1;m._handleKey=function(t,o,i){var s,a=n(t,o,i),c={},u=0,p=!1;for(s=0;s<a.length;++s)a[s].seq&&(u=Math.max(u,a[s].level));for(s=0;s<a.length;++s)if(a[s].seq){if(a[s].level!=u)continue;p=!0,c[a[s].seq]=1,r(a[s].callback,i,a[s].combo,a[s].seq)}else p||r(a[s].callback,i,a[s].combo);var l="keypress"==i.type&&x;i.type!=S||f(t)||l||e(c),x=p&&"keydown"==i.type},m._bindMultiple=function(t,e,n){for(var r=0;r<t.length;++r)y(t[r],e,n)},a(t,"keypress",o),a(t,"keydown",o),a(t,"keyup",o)}for(var w,k={8:"backspace",9:"tab",13:"enter",16:"shift",17:"ctrl",18:"alt",20:"capslock",27:"esc",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down",45:"ins",46:"del",91:"meta",93:"meta",224:"meta"},x={106:"*",107:"+",109:"-",110:".",111:"/",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},S={"~":"`","!":"1","@":"2","#":"3",$:"4","%":"5","^":"6","&":"7","*":"8","(":"9",")":"0",_:"-","+":"=",":":";",'"':"'","<":",",">":".","?":"/","|":"\\"},_={option:"alt",command:"meta","return":"enter",escape:"esc",plus:"+",mod:/Mac|iPod|iPhone|iPad/.test(navigator.platform)?"meta":"ctrl"},E=1;20>E;++E)k[111+E]="f"+E;for(E=0;9>=E;++E)k[E+96]=E;b.prototype.bind=function(t,e,n){var r=this;return t=t instanceof Array?t:[t],r._bindMultiple.call(r,t,e,n),r},b.prototype.unbind=function(t,e){var n=this;return n.bind.call(n,t,function(){},e)},b.prototype.trigger=function(t,e){var n=this;return n._directMap[t+":"+e]&&n._directMap[t+":"+e]({},t),n},b.prototype.reset=function(){var t=this;return t._callbacks={},t._directMap={},t},b.prototype.stopCallback=function(t,e){var n=this;return(" "+e.className+" ").indexOf(" mousetrap ")>-1?!1:v(e,n.target)?!1:"INPUT"==e.tagName||"SELECT"==e.tagName||"TEXTAREA"==e.tagName||e.isContentEditable},b.prototype.handleKey=function(){var t=this;return t._handleKey.apply(t,arguments)},b.init=function(){var t=b(i);for(var e in t)"_"!==e.charAt(0)&&(b[e]=function(e){return function(){return t[e].apply(t,arguments)}}(e))},b.init(),o.Mousetrap=b,"undefined"!=typeof t&&t.exports&&(t.exports=b),r=function(){return b}.call(e,n,e,t),!(r!==s&&(t.exports=r))}(window,document)},function(t,e,n){var r;(function(t,o){(function(){"use strict";function i(t){return t=String(t),t.charAt(0).toUpperCase()+t.slice(1)}function s(t,e,n){var r={6.4:"10",6.3:"8.1",6.2:"8",6.1:"Server 2008 R2 / 7","6.0":"Server 2008 / Vista",5.2:"Server 2003 / XP 64-bit",5.1:"XP",5.01:"2000 SP1","5.0":"2000","4.0":"NT","4.90":"ME"};return e&&n&&/^Win/i.test(t)&&(r=r[/[\d.]+$/.exec(t)])&&(t="Windows "+r),t=String(t),e&&n&&(t=t.replace(RegExp(e,"i"),n)),t=c(t.replace(/ ce$/i," CE").replace(/\bhpw/i,"web").replace(/\bMacintosh\b/,"Mac OS").replace(/_PowerPC\b/i," OS").replace(/\b(OS X) [^ \d]+/i,"$1").replace(/\bMac (OS X)\b/,"$1").replace(/\/(\d)/," $1").replace(/_/g,".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i,"").replace(/\bx86\.64\b/gi,"x86_64").replace(/\b(Windows Phone) OS\b/,"$1").split(" on ")[0])}function a(t,e){var n=-1,r=t?t.length:0;if("number"==typeof r&&r>-1&&x>=r)for(;++n<r;)e(t[n],n,t);else u(t,e)}function c(t){return t=d(t),/^(?:webOS|i(?:OS|P))/.test(t)?t:i(t)}function u(t,e){for(var n in t)A.call(t,n)&&e(t[n],n,t)}function p(t){return null==t?i(t):O.call(t).slice(8,-1)}function l(t,e){var n=null!=t?typeof t[e]:"number";return!/^(?:boolean|number|string|undefined)$/.test(n)&&("object"==n?!!t[e]:!0)}function h(t){return String(t).replace(/([ -])(?!$)/g,"$1?")}function f(t,e){var n=null;return a(t,function(r,o){n=e(n,r,o,t)}),n}function d(t){return String(t).replace(/^ +| +$/g,"")}function y(t){function e(e){return f(e,function(e,n){return e||RegExp("\\b"+(n.pattern||h(n))+"\\b","i").exec(t)&&(n.label||n)})}function n(e){return f(e,function(e,n,r){return e||(n[G]||n[/^[a-z]+(?: +[a-z]+\b)*/i.exec(G)]||RegExp("\\b"+h(r)+"(?:\\b|\\w*\\d)","i").exec(t))&&r})}function r(e){return f(e,function(e,n){return e||RegExp("\\b"+(n.pattern||h(n))+"\\b","i").exec(t)&&(n.label||n)})}function o(e){return f(e,function(e,n){var r=n.pattern||h(n);return!e&&(e=RegExp("\\b"+r+"(?:/[\\d.]+|[ \\w.]*)","i").exec(t))&&(e=s(e,r,n.label||n)),e})}function i(e){return f(e,function(e,n){var r=n.pattern||h(n);return!e&&(e=RegExp("\\b"+r+" *\\d+[.\\w_]*","i").exec(t)||RegExp("\\b"+r+"(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)","i").exec(t))&&((e=String(n.label&&!RegExp(r,"i").test(n.label)?n.label:e).split("/"))[1]&&!/[\d.]+/.test(e[0])&&(e[0]+=" "+e[1]),n=n.label||n,e=c(e[0].replace(RegExp(r,"i"),n).replace(RegExp("; *(?:"+n+"[_-])?","i")," ").replace(RegExp("("+n+")[-_.]?(\\w)","i"),"$1 $2"))),e})}function a(e){return f(e,function(e,n){return e||(RegExp(n+"(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)","i").exec(t)||0)[1]||null})}function m(){return this.description||""}var b=g,w=t&&"object"==typeof t&&"String"!=p(t);w&&(b=t,t=null);var k=b.navigator||{},x=k.userAgent||"";t||(t=x);var E,A,C=w||_==v,B=w?!!k.likeChrome:/\bChrome\b/.test(t)&&!/internal|\n/i.test(O.toString()),T="Object",P=w?T:"ScriptBridgingProxyObject",R=w?T:"Environment",N=w&&b.java?"JavaPackage":p(b.java),M=w?T:"RuntimeObject",j=/\bJava/.test(N)&&b.java,L=j&&p(b.environment)==R,D=j?"a":"Î±",U=j?"b":"Î²",I=b.document||{},q=b.operamini||b.opera,H=S.test(H=w&&q?q["[[Class]]"]:p(q))?H:q=null,F=t,W=[],K=null,X=t==x,z=X&&q&&"function"==typeof q.version&&q.version(),$=e(["Trident",{label:"WebKit",pattern:"AppleWebKit"},"iCab","Presto","NetFront","Tasman","KHTML","Gecko"]),V=r(["Adobe AIR","Arora","Avant Browser","Breach","Camino","Epiphany","Fennec","Flock","Galeon","GreenBrowser","iCab","Iceweasel",{label:"SRWare Iron",pattern:"Iron"},"K-Meleon","Konqueror","Lunascape","Maxthon","Midori","Nook Browser","PhantomJS","Raven","Rekonq","RockMelt","SeaMonkey",{label:"Silk",pattern:"(?:Cloud9|Silk-Accelerated)"},"Sleipnir","SlimBrowser","Sunrise","Swiftfox","WebPositive","Opera Mini",{label:"Opera Mini",pattern:"OPiOS"},"Opera",{label:"Opera",pattern:"OPR"},"Chrome",{label:"Chrome Mobile",pattern:"(?:CriOS|CrMo)"},{label:"Firefox",pattern:"(?:Firefox|Minefield)"},{label:"IE",pattern:"IEMobile"},{label:"IE",pattern:"MSIE"},"Safari"]),G=i([{label:"BlackBerry",pattern:"BB10"},"BlackBerry",{label:"Galaxy S",pattern:"GT-I9000"},{label:"Galaxy S2",pattern:"GT-I9100"},{label:"Galaxy S3",pattern:"GT-I9300"},{label:"Galaxy S4",pattern:"GT-I9500"},"Google TV","Lumia","iPad","iPod","iPhone","Kindle",{label:"Kindle Fire",pattern:"(?:Cloud9|Silk-Accelerated)"},"Nook","PlayBook","PlayStation 4","PlayStation 3","PlayStation Vita","TouchPad","Transformer",{label:"Wii U",pattern:"WiiU"},"Wii","Xbox One",{label:"Xbox 360",pattern:"Xbox"},"Xoom"]),J=n({Apple:{iPad:1,iPhone:1,iPod:1},Amazon:{Kindle:1,"Kindle Fire":1},Asus:{Transformer:1},"Barnes & Noble":{Nook:1},BlackBerry:{PlayBook:1},Google:{"Google TV":1},HP:{TouchPad:1},HTC:{},LG:{},Microsoft:{Xbox:1,"Xbox One":1},Motorola:{Xoom:1},Nintendo:{"Wii U":1,Wii:1},Nokia:{Lumia:1},Samsung:{"Galaxy S":1,"Galaxy S2":1,"Galaxy S3":1,"Galaxy S4":1},Sony:{"PlayStation 4":1,"PlayStation 3":1,"PlayStation Vita":1}}),Y=o(["Windows Phone ","Android","CentOS","Debian","Fedora","FreeBSD","Gentoo","Haiku","Kubuntu","Linux Mint","Red Hat","SuSE","Ubuntu","Xubuntu","Cygwin","Symbian OS","hpwOS","webOS ","webOS","Tablet OS","Linux","Mac OS X","Macintosh","Mac","Windows 98;","Windows "]);if($&&($=[$]),J&&!G&&(G=i([J])),(E=/\bGoogle TV\b/.exec(G))&&(G=E[0]),/\bSimulator\b/i.test(t)&&(G=(G?G+" ":"")+"Simulator"),"Opera Mini"==V&&/\bOPiOS\b/.test(t)&&W.push("running in Turbo/Uncompressed mode"),/^iP/.test(G)?(V||(V="Safari"),Y="iOS"+((E=/ OS ([\d_]+)/i.exec(t))?" "+E[1].replace(/_/g,"."):"")):"Konqueror"!=V||/buntu/i.test(Y)?J&&"Google"!=J&&(/Chrome/.test(V)&&!/\bMobile Safari\b/i.test(t)||/\bVita\b/.test(G))?(V="Android Browser",Y=/\bAndroid\b/.test(Y)?Y:"Android"):(!V||(E=!/\bMinefield\b|\(Android;/i.test(t)&&/\b(?:Firefox|Safari)\b/.exec(V)))&&(V&&!G&&/[\/,]|^[^(]+?\)/.test(t.slice(t.indexOf(E+"/")+8))&&(V=null),(E=G||J||Y)&&(G||J||/\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(Y))&&(V=/[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(Y)?Y:E)+" Browser")):Y="Kubuntu",(E=/\((Mobile|Tablet).*?Firefox\b/i.exec(t))&&E[1]&&(Y="Firefox OS",G||(G=E[1])),z||(z=a(["(?:Cloud9|CriOS|CrMo|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|Silk(?!/[\\d.]+$))","Version",h(V),"(?:Firefox|Minefield|NetFront)"])),"iCab"==$&&parseFloat(z)>3?$=["WebKit"]:"Trident"!=$&&(E=/\bOpera\b/.test(V)&&(/\bOPR\b/.test(t)?"Blink":"Presto")||/\b(?:Midori|Nook|Safari)\b/i.test(t)&&"WebKit"||!$&&/\bMSIE\b/i.test(t)&&("Mac OS"==Y?"Tasman":"Trident"))?$=[E]:/\bPlayStation\b(?! Vita\b)/i.test(V)&&"WebKit"==$&&($=["NetFront"]),"IE"==V&&(E=(/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(t)||0)[1])?(V+=" Mobile",Y="Windows Phone "+(/\+$/.test(E)?E:E+".x"),W.unshift("desktop mode")):/\bWPDesktop\b/i.test(t)?(V="IE Mobile",Y="Windows Phone 8+",W.unshift("desktop mode"),z||(z=(/\brv:([\d.]+)/.exec(t)||0)[1])):"IE"!=V&&"Trident"==$&&(E=/\brv:([\d.]+)/.exec(t))?(/\bWPDesktop\b/i.test(t)||(V&&W.push("identifying as "+V+(z?" "+z:"")),V="IE"),z=E[1]):"Chrome"!=V&&"IE"==V||!(E=/\bEdge\/([\d.]+)/.exec(t))||(V="IE",z=E[1],$=["Trident"],W.unshift("platform preview")),X){if(l(b,"global"))if(j&&(E=j.lang.System,F=E.getProperty("os.arch"),Y=Y||E.getProperty("os.name")+" "+E.getProperty("os.version")),C&&l(b,"system")&&(E=[b.system])[0]){Y||(Y=E[0].os||null);try{E[1]=b.require("ringo/engine").version,z=E[1].join("."),V="RingoJS"}catch(Z){E[0].global.system==b.system&&(V="Narwhal")}}else"object"==typeof b.process&&(E=b.process)?(V="Node.js",F=E.arch,Y=E.platform,z=/[\d.]+/.exec(E.version)[0]):L&&(V="Rhino");else p(E=b.runtime)==P?(V="Adobe AIR",Y=E.flash.system.Capabilities.os):p(E=b.phantom)==M?(V="PhantomJS",z=(E=E.version||null)&&E.major+"."+E.minor+"."+E.patch):"number"==typeof I.documentMode&&(E=/\bTrident\/(\d+)/i.exec(t))&&(z=[z,I.documentMode],(E=+E[1]+4)!=z[1]&&(W.push("IE "+z[1]+" mode"),$&&($[1]=""),z[1]=E),z="IE"==V?String(z[1].toFixed(1)):z[0]);Y=Y&&c(Y)}z&&(E=/(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(z)||/(?:alpha|beta)(?: ?\d)?/i.exec(t+";"+(X&&k.appMinorVersion))||/\bMinefield\b/i.test(t)&&"a")&&(K=/b/i.test(E)?"beta":"alpha",z=z.replace(RegExp(E+"\\+?$"),"")+("beta"==K?U:D)+(/\d+\+?/.exec(E)||"")),"Fennec"==V||"Firefox"==V&&/\b(?:Android|Firefox OS)\b/.test(Y)?V="Firefox Mobile":"Maxthon"==V&&z?z=z.replace(/\.[\d.]+/,".x"):"Silk"==V?(/\bMobi/i.test(t)||(Y="Android",W.unshift("desktop mode")),/Accelerated *= *true/i.test(t)&&W.unshift("accelerated")):/\bXbox\b/i.test(G)?(Y=null,"Xbox 360"==G&&/\bIEMobile\b/.test(t)&&W.unshift("mobile mode")):!/^(?:Chrome|IE|Opera)$/.test(V)&&(!V||G||/Browser|Mobi/.test(V))||"Windows CE"!=Y&&!/Mobi/i.test(t)?"IE"==V&&X&&null===b.external?W.unshift("platform preview"):(/\bBlackBerry\b/.test(G)||/\bBB10\b/.test(t))&&(E=(RegExp(G.replace(/ +/g," *")+"/([.\\d]+)","i").exec(t)||0)[1]||z)?(E=[E,/BB10/.test(t)],Y=(E[1]?(G=null,J="BlackBerry"):"Device Software")+" "+E[0],z=null):this!=u&&"Wii"!=G&&(X&&q||/Opera/.test(V)&&/\b(?:MSIE|Firefox)\b/i.test(t)||"Firefox"==V&&/\bOS X (?:\d+\.){2,}/.test(Y)||"IE"==V&&(Y&&!/^Win/.test(Y)&&z>5.5||/\bWindows XP\b/.test(Y)&&z>8||8==z&&!/\bTrident\b/.test(t)))&&!S.test(E=y.call(u,t.replace(S,"")+";"))&&E.name&&(E="ing as "+E.name+((E=E.version)?" "+E:""),S.test(V)?(/\bIE\b/.test(E)&&"Mac OS"==Y&&(Y=null),E="identify"+E):(E="mask"+E,V=H?c(H.replace(/([a-z])([A-Z])/g,"$1 $2")):"Opera",/\bIE\b/.test(E)&&(Y=null),X||(z=null)),$=["Presto"],W.push(E)):V+=" Mobile",(E=(/\bAppleWebKit\/([\d.]+\+?)/i.exec(t)||0)[1])&&(E=[parseFloat(E.replace(/\.(\d)$/,".0$1")),E],"Safari"==V&&"+"==E[1].slice(-1)?(V="WebKit Nightly",K="alpha",z=E[1].slice(0,-1)):(z==E[1]||z==(E[2]=(/\bSafari\/([\d.]+\+?)/i.exec(t)||0)[1]))&&(z=null),E[1]=(/\bChrome\/([\d.]+)/i.exec(t)||0)[1],537.36==E[0]&&537.36==E[2]&&parseFloat(E[1])>=28&&"IE"!=V&&($=["Blink"]),X&&(B||E[1])?($&&($[1]="like Chrome"),E=E[1]||(E=E[0],530>E?1:532>E?2:532.05>E?3:533>E?4:534.03>E?5:534.07>E?6:534.1>E?7:534.13>E?8:534.16>E?9:534.24>E?10:534.3>E?11:535.01>E?12:535.02>E?"13+":535.07>E?15:535.11>E?16:535.19>E?17:536.05>E?18:536.1>E?19:537.01>E?20:537.11>E?"21+":537.13>E?23:537.18>E?24:537.24>E?25:537.36>E?26:"Blink"!=$?"27":"28")):($&&($[1]="like Safari"),E=E[0],E=400>E?1:500>E?2:526>E?3:533>E?4:534>E?"4+":535>E?5:537>E?6:538>E?7:601>E?8:"8"),$&&($[1]+=" "+(E+="number"==typeof E?".x":/[.+]/.test(E)?"":"+")),"Safari"==V&&(!z||parseInt(z)>45)&&(z=E)),"Opera"==V&&(E=/\bzbov|zvav$/.exec(Y))?(V+=" ",W.unshift("desktop mode"),"zvav"==E?(V+="Mini",z=null):V+="Mobile",Y=Y.replace(RegExp(" *"+E+"$"),"")):"Safari"==V&&/\bChrome\b/.exec($&&$[1])&&(W.unshift("desktop mode"),V="Chrome Mobile",z=null,/\bOS X\b/.test(Y)?(J="Apple",Y="iOS 4.3+"):Y=null),z&&0==z.indexOf(E=/[\d.]+$/.exec(Y))&&t.indexOf("/"+E+"-")>-1&&(Y=d(Y.replace(E,""))),$&&!/\b(?:Avant|Nook)\b/.test(V)&&(/Browser|Lunascape|Maxthon/.test(V)||/^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Sleipnir|Web)/.test(V)&&$[1])&&(E=$[$.length-1])&&W.push(E),W.length&&(W=["("+W.join("; ")+")"]),J&&G&&G.indexOf(J)<0&&W.push("on "+J),G&&W.push((/^on /.test(W[W.length-1])?"":"on ")+G),Y&&(E=/ ([\d.+]+)$/.exec(Y),A=E&&"/"==Y.charAt(Y.length-E[0].length-1),Y={architecture:32,family:E&&!A?Y.replace(E[0],""):Y,version:E?E[1]:null,toString:function(){var t=this.version;return this.family+(t&&!A?" "+t:"")+(64==this.architecture?" 64-bit":"")}}),(E=/\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(F))&&!/\bi686\b/i.test(F)&&(Y&&(Y.architecture=64,Y.family=Y.family.replace(RegExp(" *"+E),"")),V&&(/\bWOW64\b/i.test(t)||X&&/\w(?:86|32)$/.test(k.cpuClass||k.platform)&&!/\bWin64; x64\b/i.test(t))&&W.unshift("32-bit")),t||(t=null);var Q={};return Q.description=t,Q.layout=$&&$[0],Q.manufacturer=J,Q.name=V,Q.prerelease=K,Q.product=G,Q.ua=t,Q.version=V&&z,Q.os=Y||{architecture:null,family:null,version:null,toString:function(){return"null"}},Q.parse=y,Q.toString=m,Q.version&&W.unshift(z),Q.name&&W.unshift(V),Y&&V&&(Y!=String(Y).split(" ")[0]||Y!=V.split(" ")[0]&&!G)&&W.push(G?"("+Y+")":"on "+Y),W.length&&(Q.description=W.join(" ")),Q}var m={"function":!0,object:!0},g=m[typeof window]&&window||this,v=g,b=m[typeof e]&&e,w=m[typeof t]&&t&&!t.nodeType&&t,k=b&&w&&"object"==typeof o&&o;!k||k.global!==k&&k.window!==k&&k.self!==k||(g=k);var x=Math.pow(2,53)-1,S=/\bOpera/,_=this,E=Object.prototype,A=E.hasOwnProperty,O=E.toString;r=function(){return y()}.call(e,n,e,t),!(void 0!==r&&(t.exports=r))}).call(this)}).call(e,n(22)(t),function(){return this}())},function(t,e,n){function r(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=l[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(a(r.parts[i],e))}else{for(var s=[],i=0;i<r.parts.length;i++)s.push(a(r.parts[i],e));l[r.id]={id:r.id,refs:1,parts:s}}}}function o(t){for(var e=[],n={},r=0;r<t.length;r++){var o=t[r],i=o[0],s=o[1],a=o[2],c=o[3],u={css:s,media:a,sourceMap:c};n[i]?n[i].parts.push(u):e.push(n[i]={id:i,parts:[u]})}return e}function i(){var t=document.createElement("style"),e=d();return t.type="text/css",e.appendChild(t),t}function s(){var t=document.createElement("link"),e=d();return t.rel="stylesheet",e.appendChild(t),t}function a(t,e){var n,r,o;if(e.singleton){var a=m++;n=y||(y=i()),r=c.bind(null,n,a,!1),o=c.bind(null,n,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=s(),r=p.bind(null,n),o=function(){n.parentNode.removeChild(n),n.href&&URL.revokeObjectURL(n.href)}):(n=i(),r=u.bind(null,n),o=function(){n.parentNode.removeChild(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}function c(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=g(e,o);else{var i=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}function u(t,e){var n=e.css,r=e.media;e.sourceMap;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function p(t,e){var n=e.css,r=(e.media,e.sourceMap);r&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var o=new Blob([n],{type:"text/css"}),i=t.href;t.href=URL.createObjectURL(o),i&&URL.revokeObjectURL(i)}var l={},h=function(t){var e;return function(){return"undefined"==typeof e&&(e=t.apply(this,arguments)),e}},f=h(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),d=h(function(){return document.head||document.getElementsByTagName("head")[0]}),y=null,m=0;t.exports=function(t,e){if("object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");e=e||{},"undefined"==typeof e.singleton&&(e.singleton=f());var n=o(t);return r(n,e),function(t){for(var i=[],s=0;s<n.length;s++){var a=n[s],c=l[a.id];c.refs--,i.push(c)}if(t){var u=o(t);r(u,e)}for(var s=0;s<i.length;s++){var c=i[s];if(0===c.refs){for(var p=0;p<c.parts.length;p++)c.parts[p]();delete l[c.id]}}}};var g=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}()},function(t,e,n){var r=n(6);"string"==typeof r&&(r=[[t.id,r,""]]);var o=n(36)(r,{});r.locals&&(t.exports=r.locals),r.locals||t.hot.accept(6,function(){var e=n(6);"string"==typeof e&&(e=[[t.id,e,""]]),o(e)}),t.hot.dispose(function(){o()})},function(t,e,n){(function(t){function e(){i?(console.log("[WDS] App hot update..."),window.postMessage("webpackHotUpdate"+a,"*")):(console.log("[WDS] App updated. Reloading..."),window.location.reload())}var r=n(39),o=n(70);document.getElementsByTagName("script");r=r.connect(t.substr(1));var i=!1,s=!0,a="";r.on("hot",function(){i=!0,console.log("[WDS] Hot Module Replacement enabled.")}),r.on("invalid",function(){console.log("[WDS] App updated. Recompiling...")}),r.on("hash",function(t){a=t}),r.on("still-ok",function(){console.log("[WDS] Nothing changed.")}),r.on("ok",function(){return s?s=!1:void e()}),r.on("warnings",function(t){console.log("[WDS] Warnings while compiling.");for(var n=0;n<t.length;n++)console.warn(o(t[n]));
return s?s=!1:void e()}),r.on("errors",function(t){console.log("[WDS] Errors while compiling.");for(var n=0;n<t.length;n++)console.error(o(t[n]));return s?s=!1:void e()}),r.on("proxy-error",function(t){console.log("[WDS] Proxy error.");for(var n=0;n<t.length;n++)console.error(o(t[n]));return s?s=!1:void e()}),r.on("disconnect",function(){console.error("[WDS] Disconnected!")})}).call(e,"?http://localhost:8080")},function(t,e,n){t.exports=n(40)},function(t,e,n){function r(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,r=o(t),i=r.source,u=r.id;return e.forceNew||e["force new connection"]||!1===e.multiplex?(a("ignoring socket cache for %s",i),n=s(i,e)):(c[u]||(a("new io instance for %s",i),c[u]=s(i,e)),n=c[u]),n.socket(r.path)}var o=n(15),i=n(10),s=n(12),a=n(3)("socket.io-client");t.exports=e=r;var c=e.managers={};e.protocol=i.protocol,e.connect=r,e.Manager=n(12),e.Socket=n(14)},function(t,e){function n(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=n,n.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(t){this.ms=t},n.prototype.setMax=function(t){this.max=t},n.prototype.setJitter=function(t){this.jitter=t}},function(t,e,n){t.exports=n(43)},function(t,e,n){t.exports=n(44),t.exports.parser=n(2)},function(t,e,n){(function(e){function r(t,n){if(!(this instanceof r))return new r(t,n);if(n=n||{},t&&"object"==typeof t&&(n=t,t=null),t&&(t=p(t),n.host=t.host,n.secure="https"==t.protocol||"wss"==t.protocol,n.port=t.port,t.query&&(n.query=t.query)),this.secure=null!=n.secure?n.secure:e.location&&"https:"==location.protocol,n.host){var o=n.host.split(":");n.hostname=o.shift(),o.length?n.port=o.pop():n.port||(n.port=this.secure?"443":"80")}this.agent=n.agent||!1,this.hostname=n.hostname||(e.location?location.hostname:"localhost"),this.port=n.port||(e.location&&location.port?location.port:this.secure?443:80),this.query=n.query||{},"string"==typeof this.query&&(this.query=h.decode(this.query)),this.upgrade=!1!==n.upgrade,this.path=(n.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!n.forceJSONP,this.jsonp=!1!==n.jsonp,this.forceBase64=!!n.forceBase64,this.enablesXDR=!!n.enablesXDR,this.timestampParam=n.timestampParam||"t",this.timestampRequests=n.timestampRequests,this.transports=n.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.callbackBuffer=[],this.policyPort=n.policyPort||843,this.rememberUpgrade=n.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=n.onlyBinaryUpgrades,this.pfx=n.pfx||null,this.key=n.key||null,this.passphrase=n.passphrase||null,this.cert=n.cert||null,this.ca=n.ca||null,this.ciphers=n.ciphers||null,this.rejectUnauthorized=n.rejectUnauthorized||null,this.open()}function o(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}var i=n(17),s=n(1),a=n(5)("engine.io-client:socket"),c=n(19),u=n(2),p=n(61),l=n(60),h=n(9);t.exports=r,r.priorWebsocketSuccess=!1,s(r.prototype),r.protocol=u.protocol,r.Socket=r,r.Transport=n(7),r.transports=n(17),r.parser=n(2),r.prototype.createTransport=function(t){a('creating transport "%s"',t);var e=o(this.query);e.EIO=u.protocol,e.transport=t,this.id&&(e.sid=this.id);var n=new i[t]({agent:this.agent,hostname:this.hostname,port:this.port,secure:this.secure,path:this.path,query:e,forceJSONP:this.forceJSONP,jsonp:this.jsonp,forceBase64:this.forceBase64,enablesXDR:this.enablesXDR,timestampRequests:this.timestampRequests,timestampParam:this.timestampParam,policyPort:this.policyPort,socket:this,pfx:this.pfx,key:this.key,passphrase:this.passphrase,cert:this.cert,ca:this.ca,ciphers:this.ciphers,rejectUnauthorized:this.rejectUnauthorized});return n},r.prototype.open=function(){var t;if(this.rememberUpgrade&&r.priorWebsocketSuccess&&-1!=this.transports.indexOf("websocket"))t="websocket";else{if(0==this.transports.length){var e=this;return void setTimeout(function(){e.emit("error","No transports available")},0)}t=this.transports[0]}this.readyState="opening";var t;try{t=this.createTransport(t)}catch(n){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},r.prototype.setTransport=function(t){a("setting transport %s",t.name);var e=this;this.transport&&(a("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",function(){e.onDrain()}).on("packet",function(t){e.onPacket(t)}).on("error",function(t){e.onError(t)}).on("close",function(){e.onClose("transport close")})},r.prototype.probe=function(t){function e(){if(h.onlyBinaryUpgrades){var e=!this.supportsBinary&&h.transport.supportsBinary;l=l||e}l||(a('probe transport "%s" opened',t),p.send([{type:"ping",data:"probe"}]),p.once("packet",function(e){if(!l)if("pong"==e.type&&"probe"==e.data){if(a('probe transport "%s" pong',t),h.upgrading=!0,h.emit("upgrading",p),!p)return;r.priorWebsocketSuccess="websocket"==p.name,a('pausing current transport "%s"',h.transport.name),h.transport.pause(function(){l||"closed"!=h.readyState&&(a("changing transport and sending upgrade packet"),u(),h.setTransport(p),p.send([{type:"upgrade"}]),h.emit("upgrade",p),p=null,h.upgrading=!1,h.flush())})}else{a('probe transport "%s" failed',t);var n=new Error("probe error");n.transport=p.name,h.emit("upgradeError",n)}}))}function n(){l||(l=!0,u(),p.close(),p=null)}function o(e){var r=new Error("probe error: "+e);r.transport=p.name,n(),a('probe transport "%s" failed because of error: %s',t,e),h.emit("upgradeError",r)}function i(){o("transport closed")}function s(){o("socket closed")}function c(t){p&&t.name!=p.name&&(a('"%s" works - aborting "%s"',t.name,p.name),n())}function u(){p.removeListener("open",e),p.removeListener("error",o),p.removeListener("close",i),h.removeListener("close",s),h.removeListener("upgrading",c)}a('probing transport "%s"',t);var p=this.createTransport(t,{probe:1}),l=!1,h=this;r.priorWebsocketSuccess=!1,p.once("open",e),p.once("error",o),p.once("close",i),this.once("close",s),this.once("upgrading",c),p.open()},r.prototype.onOpen=function(){if(a("socket open"),this.readyState="open",r.priorWebsocketSuccess="websocket"==this.transport.name,this.emit("open"),this.flush(),"open"==this.readyState&&this.upgrade&&this.transport.pause){a("starting upgrade probes");for(var t=0,e=this.upgrades.length;e>t;t++)this.probe(this.upgrades[t])}},r.prototype.onPacket=function(t){if("opening"==this.readyState||"open"==this.readyState)switch(a('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(l(t.data));break;case"pong":this.setPing();break;case"error":var e=new Error("server error");e.code=t.data,this.emit("error",e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else a('packet received with socket readyState "%s"',this.readyState)},r.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!=this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},r.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout(function(){"closed"!=e.readyState&&e.onClose("ping timeout")},t||e.pingInterval+e.pingTimeout)},r.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout(function(){a("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)},t.pingInterval)},r.prototype.ping=function(){this.sendPacket("ping")},r.prototype.onDrain=function(){for(var t=0;t<this.prevBufferLen;t++)this.callbackBuffer[t]&&this.callbackBuffer[t]();this.writeBuffer.splice(0,this.prevBufferLen),this.callbackBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0==this.writeBuffer.length?this.emit("drain"):this.flush()},r.prototype.flush=function(){"closed"!=this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(a("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},r.prototype.write=r.prototype.send=function(t,e){return this.sendPacket("message",t,e),this},r.prototype.sendPacket=function(t,e,n){if("closing"!=this.readyState&&"closed"!=this.readyState){var r={type:t,data:e};this.emit("packetCreate",r),this.writeBuffer.push(r),this.callbackBuffer.push(n),this.flush()}},r.prototype.close=function(){function t(){r.onClose("forced close"),a("socket closing - telling transport to close"),r.transport.close()}function e(){r.removeListener("upgrade",e),r.removeListener("upgradeError",e),t()}function n(){r.once("upgrade",e),r.once("upgradeError",e)}if("opening"==this.readyState||"open"==this.readyState){this.readyState="closing";var r=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?n():t()}):this.upgrading?n():t()}return this},r.prototype.onError=function(t){a("socket error %j",t),r.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},r.prototype.onClose=function(t,e){if("opening"==this.readyState||"open"==this.readyState||"closing"==this.readyState){a('socket close with reason: "%s"',t);var n=this;clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),setTimeout(function(){n.writeBuffer=[],n.callbackBuffer=[],n.prevBufferLen=0},0),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e)}},r.prototype.filterUpgrades=function(t){for(var e=[],n=0,r=t.length;r>n;n++)~c(this.transports,t[n])&&e.push(t[n]);return e}}).call(e,function(){return this}())},function(t,e,n){(function(e){function r(){}function o(t){i.call(this,t),this.query=this.query||{},a||(e.___eio||(e.___eio=[]),a=e.___eio),this.index=a.length;var n=this;a.push(function(t){n.onData(t)}),this.query.j=this.index,e.document&&e.addEventListener&&e.addEventListener("beforeunload",function(){n.script&&(n.script.onerror=r)},!1)}var i=n(18),s=n(4);t.exports=o;var a,c=/\n/g,u=/\\n/g;s(o,i),o.prototype.supportsBinary=!1,o.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),i.prototype.doClose.call(this)},o.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n),this.script=e;var r="undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent);r&&setTimeout(function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)},100)},o.prototype.doWrite=function(t,e){function n(){r(),e()}function r(){if(o.iframe)try{o.form.removeChild(o.iframe)}catch(t){o.onError("jsonp polling iframe removal error",t)}try{var e='<iframe src="javascript:0" name="'+o.iframeId+'">';i=document.createElement(e)}catch(t){i=document.createElement("iframe"),i.name=o.iframeId,i.src="javascript:0"}i.id=o.iframeId,o.form.appendChild(i),o.iframe=i}var o=this;if(!this.form){var i,s=document.createElement("form"),a=document.createElement("textarea"),p=this.iframeId="eio_iframe_"+this.index;s.className="socketio",s.style.position="absolute",s.style.top="-1000px",s.style.left="-1000px",s.target=p,s.method="POST",s.setAttribute("accept-charset","utf-8"),a.name="d",s.appendChild(a),document.body.appendChild(s),this.form=s,this.area=a}this.form.action=this.uri(),r(),t=t.replace(u,"\\\n"),this.area.value=t.replace(c,"\\n");try{this.form.submit()}catch(l){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"==o.iframe.readyState&&n()}:this.iframe.onload=n}}).call(e,function(){return this}())},function(t,e,n){(function(e){function r(){}function o(t){if(c.call(this,t),e.location){var n="https:"==location.protocol,r=location.port;r||(r=n?443:80),this.xd=t.hostname!=e.location.hostname||r!=t.port,this.xs=t.secure!=n}}function i(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!=t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.create()}function s(){for(var t in i.requests)i.requests.hasOwnProperty(t)&&i.requests[t].abort()}var a=n(8),c=n(18),u=n(1),p=n(4),l=n(5)("engine.io-client:polling-xhr");t.exports=o,t.exports.Request=i,p(o,c),o.prototype.supportsBinary=!0,o.prototype.request=function(t){return t=t||{},t.uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,new i(t)},o.prototype.doWrite=function(t,e){var n="string"!=typeof t&&void 0!==t,r=this.request({method:"POST",data:t,isBinary:n}),o=this;r.on("success",e),r.on("error",function(t){o.onError("xhr post error",t)}),this.sendXhr=r},o.prototype.doPoll=function(){l("xhr poll");var t=this.request(),e=this;t.on("data",function(t){e.onData(t)}),t.on("error",function(t){e.onError("xhr poll error",t)}),this.pollXhr=t},u(i.prototype),i.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var n=this.xhr=new a(t),r=this;try{if(l("xhr open %s: %s",this.method,this.uri),n.open(this.method,this.uri,this.async),this.supportsBinary&&(n.responseType="arraybuffer"),"POST"==this.method)try{this.isBinary?n.setRequestHeader("Content-type","application/octet-stream"):n.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(o){}"withCredentials"in n&&(n.withCredentials=!0),this.hasXDR()?(n.onload=function(){r.onLoad()},n.onerror=function(){r.onError(n.responseText)}):n.onreadystatechange=function(){4==n.readyState&&(200==n.status||1223==n.status?r.onLoad():setTimeout(function(){r.onError(n.status)},0))},l("xhr data %s",this.data),n.send(this.data)}catch(o){return void setTimeout(function(){r.onError(o)},0)}e.document&&(this.index=i.requestsCount++,i.requests[this.index]=this)},i.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},i.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},i.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},i.prototype.cleanup=function(t){if("undefined"!=typeof this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=r:this.xhr.onreadystatechange=r,t)try{this.xhr.abort()}catch(n){}e.document&&delete i.requests[this.index],this.xhr=null}},i.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type").split(";")[0]}catch(n){}t="application/octet-stream"===e?this.xhr.response:this.supportsBinary?"ok":this.xhr.responseText}catch(n){this.onError(n)}null!=t&&this.onData(t)},i.prototype.hasXDR=function(){return"undefined"!=typeof e.XDomainRequest&&!this.xs&&this.enablesXDR},i.prototype.abort=function(){this.cleanup()},e.document&&(i.requestsCount=0,i.requests={},e.attachEvent?e.attachEvent("onunload",s):e.addEventListener&&e.addEventListener("beforeunload",s,!1))}).call(e,function(){return this}())},function(t,e,n){function r(t){var e=t&&t.forceBase64;e&&(this.supportsBinary=!1),o.call(this,t)}var o=n(7),i=n(2),s=n(9),a=n(4),c=n(5)("engine.io-client:websocket"),u=n(62);t.exports=r,a(r,o),r.prototype.name="websocket",r.prototype.supportsBinary=!0,r.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=void 0,n={agent:this.agent};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.ws=new u(t,e,n),void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.binaryType="arraybuffer",this.addEventListeners()}},r.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},"undefined"!=typeof navigator&&/iPad|iPhone|iPod/i.test(navigator.userAgent)&&(r.prototype.onData=function(t){var e=this;setTimeout(function(){o.prototype.onData.call(e,t)},0)}),r.prototype.write=function(t){function e(){n.writable=!0,n.emit("drain")}var n=this;this.writable=!1;for(var r=0,o=t.length;o>r;r++)i.encodePacket(t[r],this.supportsBinary,function(t){try{n.ws.send(t)}catch(e){c("websocket closed before onclose event")}});setTimeout(e,0)},r.prototype.onClose=function(){o.prototype.onClose.call(this)},r.prototype.doClose=function(){"undefined"!=typeof this.ws&&this.ws.close()},r.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",n="";return this.port&&("wss"==e&&443!=this.port||"ws"==e&&80!=this.port)&&(n=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=+new Date),this.supportsBinary||(t.b64=1),t=s.encode(t),t.length&&(t="?"+t),e+"://"+this.hostname+n+this.path+t},r.prototype.check=function(){return!(!u||"__initialize"in u&&this.name===r.prototype.name)}},function(t,e,n){function r(){return e.colors[p++%e.colors.length]}function o(t){function n(){}function o(){var t=o,n=+new Date,i=n-(u||n);t.diff=i,t.prev=u,t.curr=n,u=n,null==t.useColors&&(t.useColors=e.useColors()),null==t.color&&t.useColors&&(t.color=r());var s=Array.prototype.slice.call(arguments);s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&(s=["%o"].concat(s));var a=0;s[0]=s[0].replace(/%([a-z%])/g,function(n,r){if("%%"===n)return n;a++;var o=e.formatters[r];if("function"==typeof o){var i=s[a];n=o.call(t,i),s.splice(a,1),a--}return n}),"function"==typeof e.formatArgs&&(s=e.formatArgs.apply(t,s));var c=o.log||e.log||console.log.bind(console);c.apply(t,s)}n.enabled=!1,o.enabled=!0;var i=e.enabled(t)?o:n;return i.namespace=t,i}function i(t){e.save(t);for(var n=(t||"").split(/[\s,]+/),r=n.length,o=0;r>o;o++)n[o]&&(t=n[o].replace(/\*/g,".*?"),"-"===t[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")))}function s(){e.enable("")}function a(t){var n,r;for(n=0,r=e.skips.length;r>n;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;r>n;n++)if(e.names[n].test(t))return!0;return!1}function c(t){return t instanceof Error?t.stack||t.message:t}e=t.exports=o,e.coerce=c,e.disable=s,e.enable=i,e.enabled=a,e.humanize=n(49),e.names=[],e.skips=[],e.formatters={};var u,p=0},function(t,e){function n(t){var e=/^((?:\d+)?\.?\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(t);if(e){var n=parseFloat(e[1]),r=(e[2]||"ms").toLowerCase();switch(r){case"years":case"year":case"y":return n*p;case"days":case"day":case"d":return n*u;case"hours":case"hour":case"h":return n*c;case"minutes":case"minute":case"m":return n*a;case"seconds":case"second":case"s":return n*s;case"ms":return n}}}function r(t){return t>=u?Math.round(t/u)+"d":t>=c?Math.round(t/c)+"h":t>=a?Math.round(t/a)+"m":t>=s?Math.round(t/s)+"s":t+"ms"}function o(t){return i(t,u,"day")||i(t,c,"hour")||i(t,a,"minute")||i(t,s,"second")||t+" ms"}function i(t,e,n){return e>t?void 0:1.5*e>t?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}var s=1e3,a=60*s,c=60*a,u=24*c,p=365.25*u;t.exports=function(t,e){return e=e||{},"string"==typeof t?n(t):e["long"]?o(t):r(t)}},function(t,e){t.exports=Object.keys||function(t){var e=[],n=Object.prototype.hasOwnProperty;for(var r in t)n.call(t,r)&&e.push(r);return e}},function(t,e){function n(t,e,n){function o(t,r){if(o.count<=0)throw new Error("after called too many times");--o.count,t?(i=!0,e(t),e=n):0!==o.count||i||e(null,r)}var i=!1;return n=n||r,o.count=t,0===t?e():o}function r(){}t.exports=n},function(t,e){t.exports=function(t,e,n){var r=t.byteLength;if(e=e||0,n=n||r,t.slice)return t.slice(e,n);if(0>e&&(e+=r),0>n&&(n+=r),n>r&&(n=r),e>=r||e>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(t),i=new Uint8Array(n-e),s=e,a=0;n>s;s++,a++)i[a]=o[s];return i.buffer}},function(t,e){!function(t){"use strict";e.encode=function(e){var n,r=new Uint8Array(e),o=r.length,i="";for(n=0;o>n;n+=3)i+=t[r[n]>>2],i+=t[(3&r[n])<<4|r[n+1]>>4],i+=t[(15&r[n+1])<<2|r[n+2]>>6],i+=t[63&r[n+2]];return o%3===2?i=i.substring(0,i.length-1)+"=":o%3===1&&(i=i.substring(0,i.length-2)+"=="),i},e.decode=function(e){var n,r,o,i,s,a=.75*e.length,c=e.length,u=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var p=new ArrayBuffer(a),l=new Uint8Array(p);for(n=0;c>n;n+=4)r=t.indexOf(e[n]),o=t.indexOf(e[n+1]),i=t.indexOf(e[n+2]),s=t.indexOf(e[n+3]),l[u++]=r<<2|o>>4,l[u++]=(15&o)<<4|i>>2,l[u++]=(3&i)<<6|63&s;return p}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},function(t,e){(function(e){function n(t,e){e=e||{};for(var n=new r,o=0;o<t.length;o++)n.append(t[o]);return e.type?n.getBlob(e.type):n.getBlob()}var r=e.BlobBuilder||e.WebKitBlobBuilder||e.MSBlobBuilder||e.MozBlobBuilder,o=function(){try{var t=new Blob(["hi"]);return 2==t.size}catch(e){return!1}}(),i=r&&r.prototype.append&&r.prototype.getBlob;t.exports=function(){return o?e.Blob:i?n:void 0}()}).call(e,function(){return this}())},function(t,e,n){(function(e){function r(t){function n(t){if(!t)return!1;if(e.Buffer&&e.Buffer.isBuffer(t)||e.ArrayBuffer&&t instanceof ArrayBuffer||e.Blob&&t instanceof Blob||e.File&&t instanceof File)return!0;if(o(t)){for(var r=0;r<t.length;r++)if(n(t[r]))return!0}else if(t&&"object"==typeof t){t.toJSON&&(t=t.toJSON());for(var i in t)if(t.hasOwnProperty(i)&&n(t[i]))return!0}return!1}return n(t)}var o=n(56);t.exports=r}).call(e,function(){return this}())},function(t,e){t.exports=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)}},function(t,e,n){var r;(function(t,o){!function(i){function s(t){for(var e,n,r=[],o=0,i=t.length;i>o;)e=t.charCodeAt(o++),e>=55296&&56319>=e&&i>o?(n=t.charCodeAt(o++),56320==(64512&n)?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),o--)):r.push(e);return r}function a(t){for(var e,n=t.length,r=-1,o="";++r<n;)e=t[r],e>65535&&(e-=65536,o+=b(e>>>10&1023|55296),e=56320|1023&e),o+=b(e);return o}function c(t,e){return b(t>>e&63|128)}function u(t){if(0==(4294967168&t))return b(t);var e="";return 0==(4294965248&t)?e=b(t>>6&31|192):0==(4294901760&t)?(e=b(t>>12&15|224),e+=c(t,6)):0==(4292870144&t)&&(e=b(t>>18&7|240),e+=c(t,12),e+=c(t,6)),e+=b(63&t|128)}function p(t){for(var e,n=s(t),r=n.length,o=-1,i="";++o<r;)e=n[o],i+=u(e);return i}function l(){if(v>=g)throw Error("Invalid byte index");var t=255&m[v];if(v++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function h(){var t,e,n,r,o;if(v>g)throw Error("Invalid byte index");if(v==g)return!1;if(t=255&m[v],v++,0==(128&t))return t;if(192==(224&t)){var e=l();if(o=(31&t)<<6|e,o>=128)return o;throw Error("Invalid continuation byte")}if(224==(240&t)){if(e=l(),n=l(),o=(15&t)<<12|e<<6|n,o>=2048)return o;throw Error("Invalid continuation byte")}if(240==(248&t)&&(e=l(),n=l(),r=l(),o=(15&t)<<18|e<<12|n<<6|r,o>=65536&&1114111>=o))return o;throw Error("Invalid UTF-8 detected")}function f(t){m=s(t),g=m.length,v=0;for(var e,n=[];(e=h())!==!1;)n.push(e);return a(n)}var d="object"==typeof e&&e,y=("object"==typeof t&&t&&t.exports==d&&t,"object"==typeof o&&o);(y.global===y||y.window===y)&&(i=y);var m,g,v,b=String.fromCharCode,w={version:"2.0.0",encode:p,decode:f};r=function(){return w}.call(e,n,e,t),!(void 0!==r&&(t.exports=r))}(this)}).call(e,n(22)(t),function(){return this}())},function(t,e,n){var r=n(59);try{t.exports="XMLHttpRequest"in r&&"withCredentials"in new r.XMLHttpRequest}catch(o){t.exports=!1}},function(t,e){t.exports=function(){return this}()},function(t,e){(function(e){var n=/^[\],:{}\s]*$/,r=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,o=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,i=/(?:^|:|,)(?:\s*\[)+/g,s=/^\s+/,a=/\s+$/;t.exports=function(t){return"string"==typeof t&&t?(t=t.replace(s,"").replace(a,""),e.JSON&&JSON.parse?JSON.parse(t):n.test(t.replace(r,"@").replace(o,"]").replace(i,""))?new Function("return "+t)():void 0):null}}).call(e,function(){return this}())},function(t,e){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,o=t.indexOf("["),i=t.indexOf("]");-1!=o&&-1!=i&&(t=t.substring(0,o)+t.substring(o,i).replace(/:/g,";")+t.substring(i,t.length));for(var s=n.exec(t||""),a={},c=14;c--;)a[r[c]]=s[c]||"";return-1!=o&&-1!=i&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(t,e){function n(t,e,n){var r;return r=e?new o(t,e):new o(t)}var r=function(){return this}(),o=r.WebSocket||r.MozWebSocket;t.exports=o?n:null,o&&(n.prototype=o.prototype)},function(t,e,n){(function(e){function r(t){function n(t){if(!t)return!1;if(e.Buffer&&e.Buffer.isBuffer(t)||e.ArrayBuffer&&t instanceof ArrayBuffer||e.Blob&&t instanceof Blob||e.File&&t instanceof File)return!0;if(o(t)){for(var r=0;r<t.length;r++)if(n(t[r]))return!0}else if(t&&"object"==typeof t){t.toJSON&&(t=t.toJSON());for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)&&n(t[i]))return!0}return!1}return n(t)}var o=n(64);t.exports=r}).call(e,function(){return this}())},function(t,e){t.exports=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)}},function(t,e){var n=Object.prototype.hasOwnProperty;e.keys=Object.keys||function(t){var e=[];for(var r in t)n.call(t,r)&&e.push(r);return e},e.values=function(t){var e=[];for(var r in t)n.call(t,r)&&e.push(t[r]);return e},e.merge=function(t,e){for(var r in e)n.call(e,r)&&(t[r]=e[r]);return t},e.length=function(t){return e.keys(t).length},e.isEmpty=function(t){return 0==e.length(t)}},function(t,e){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){for(var e=n.exec(t||""),o={},i=14;i--;)o[r[i]]=e[i]||"";return o}},function(t,e,n){(function(t){var r=n(21),o=n(20);e.deconstructPacket=function(t){function e(t){if(!t)return t;if(o(t)){var i={_placeholder:!0,num:n.length};return n.push(t),i}if(r(t)){for(var s=new Array(t.length),a=0;a<t.length;a++)s[a]=e(t[a]);return s}if("object"==typeof t&&!(t instanceof Date)){var s={};for(var c in t)s[c]=e(t[c]);return s}return t}var n=[],i=t.data,s=t;return s.data=e(i),s.attachments=n.length,{packet:s,buffers:n}},e.reconstructPacket=function(t,e){function n(t){if(t&&t._placeholder){var o=e[t.num];return o}if(r(t)){for(var i=0;i<t.length;i++)t[i]=n(t[i]);return t}if(t&&"object"==typeof t){for(var s in t)t[s]=n(t[s]);return t}return t}return t.data=n(t.data),t.attachments=void 0,t},e.removeBlobs=function(e,n){function i(e,c,u){if(!e)return e;if(t.Blob&&e instanceof Blob||t.File&&e instanceof File){s++;var p=new FileReader;p.onload=function(){u?u[c]=this.result:a=this.result,--s||n(a)},p.readAsArrayBuffer(e)}else if(r(e))for(var l=0;l<e.length;l++)i(e[l],l,e);else if(e&&"object"==typeof e&&!o(e))for(var h in e)i(e[h],h,e)}var s=0,a=e;i(a),s||n(a)}}).call(e,function(){return this}())},function(t,e,n){var r;!function(o){function i(t){if(i[t]!==c)return i[t];var e;if("bug-string-char-index"==t)e="a"!="a"[0];else if("json"==t)e=i("json-stringify")&&i("json-parse");else{var n,r='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if("json-stringify"==t){var o=h.stringify,s="function"==typeof o&&f;if(s){(n=function(){return 1}).toJSON=n;try{s="0"===o(0)&&"0"===o(new Number)&&'""'==o(new String)&&o(u)===c&&o(c)===c&&o()===c&&"1"===o(n)&&"[1]"==o([n])&&"[null]"==o([c])&&"null"==o(null)&&"[null,null,null]"==o([c,u,null])&&o({a:[n,!0,!1,null,"\x00\b\n\f\r	"]})==r&&"1"===o(null,n)&&"[\n 1,\n 2\n]"==o([1,2],null,1)&&'"-271821-04-20T00:00:00.000Z"'==o(new Date(-864e13))&&'"+275760-09-13T00:00:00.000Z"'==o(new Date(864e13))&&'"-000001-01-01T00:00:00.000Z"'==o(new Date(-621987552e5))&&'"1969-12-31T23:59:59.999Z"'==o(new Date(-1))}catch(a){s=!1}}e=s}if("json-parse"==t){var p=h.parse;if("function"==typeof p)try{if(0===p("0")&&!p(!1)){n=p(r);var l=5==n.a.length&&1===n.a[0];if(l){try{l=!p('"	"')}catch(a){}if(l)try{l=1!==p("01")}catch(a){}if(l)try{l=1!==p("1.")}catch(a){}}}}catch(a){l=!1}e=l}}return i[t]=!!e}var s,a,c,u={}.toString,p=n(72),l="object"==typeof JSON&&JSON,h="object"==typeof e&&e&&!e.nodeType&&e;h&&l?(h.stringify=l.stringify,h.parse=l.parse):h=o.JSON=l||{};var f=new Date(-0xc782b5b800cec);try{f=-109252==f.getUTCFullYear()&&0===f.getUTCMonth()&&1===f.getUTCDate()&&10==f.getUTCHours()&&37==f.getUTCMinutes()&&6==f.getUTCSeconds()&&708==f.getUTCMilliseconds()}catch(d){}if(!i("json")){var y="[object Function]",m="[object Date]",g="[object Number]",v="[object String]",b="[object Array]",w="[object Boolean]",k=i("bug-string-char-index");if(!f)var x=Math.floor,S=[0,31,59,90,120,151,181,212,243,273,304,334],_=function(t,e){return S[e]+365*(t-1970)+x((t-1969+(e=+(e>1)))/4)-x((t-1901+e)/100)+x((t-1601+e)/400)};(s={}.hasOwnProperty)||(s=function(t){var e,n={};return(n.__proto__=null,n.__proto__={toString:1},n).toString!=u?s=function(t){var e=this.__proto__,n=t in(this.__proto__=null,this);return this.__proto__=e,n}:(e=n.constructor,s=function(t){var n=(this.constructor||e).prototype;return t in this&&!(t in n&&this[t]===n[t])}),n=null,s.call(this,t)});var E={"boolean":1,number:1,string:1,undefined:1},A=function(t,e){var n=typeof t[e];return"object"==n?!!t[e]:!E[n]};if(a=function(t,e){var n,r,o,i=0;(n=function(){this.valueOf=0}).prototype.valueOf=0,r=new n;for(o in r)s.call(r,o)&&i++;return n=r=null,i?a=2==i?function(t,e){var n,r={},o=u.call(t)==y;for(n in t)o&&"prototype"==n||s.call(r,n)||!(r[n]=1)||!s.call(t,n)||e(n)}:function(t,e){var n,r,o=u.call(t)==y;for(n in t)o&&"prototype"==n||!s.call(t,n)||(r="constructor"===n)||e(n);(r||s.call(t,n="constructor"))&&e(n)}:(r=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],a=function(t,e){var n,o,i=u.call(t)==y,a=!i&&"function"!=typeof t.constructor&&A(t,"hasOwnProperty")?t.hasOwnProperty:s;for(n in t)i&&"prototype"==n||!a.call(t,n)||e(n);for(o=r.length;n=r[--o];a.call(t,n)&&e(n));}),a(t,e)},!i("json-stringify")){var O={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},C="000000",B=function(t,e){return(C+(e||0)).slice(-t)},T="\\u00",P=function(t){var e,n='"',r=0,o=t.length,i=o>10&&k;for(i&&(e=t.split(""));o>r;r++){var s=t.charCodeAt(r);switch(s){case 8:case 9:case 10:case 12:case 13:case 34:case 92:n+=O[s];break;default:if(32>s){n+=T+B(2,s.toString(16));break}n+=i?e[r]:k?t.charAt(r):t[r]}}return n+'"'},R=function(t,e,n,r,o,i,p){
var l,h,f,d,y,k,S,E,A,O,C,T,N,M,j,L;try{l=e[t]}catch(D){}if("object"==typeof l&&l)if(h=u.call(l),h!=m||s.call(l,"toJSON"))"function"==typeof l.toJSON&&(h!=g&&h!=v&&h!=b||s.call(l,"toJSON"))&&(l=l.toJSON(t));else if(l>-1/0&&1/0>l){if(_){for(y=x(l/864e5),f=x(y/365.2425)+1970-1;_(f+1,0)<=y;f++);for(d=x((y-_(f,0))/30.42);_(f,d+1)<=y;d++);y=1+y-_(f,d),k=(l%864e5+864e5)%864e5,S=x(k/36e5)%24,E=x(k/6e4)%60,A=x(k/1e3)%60,O=k%1e3}else f=l.getUTCFullYear(),d=l.getUTCMonth(),y=l.getUTCDate(),S=l.getUTCHours(),E=l.getUTCMinutes(),A=l.getUTCSeconds(),O=l.getUTCMilliseconds();l=(0>=f||f>=1e4?(0>f?"-":"+")+B(6,0>f?-f:f):B(4,f))+"-"+B(2,d+1)+"-"+B(2,y)+"T"+B(2,S)+":"+B(2,E)+":"+B(2,A)+"."+B(3,O)+"Z"}else l=null;if(n&&(l=n.call(e,t,l)),null===l)return"null";if(h=u.call(l),h==w)return""+l;if(h==g)return l>-1/0&&1/0>l?""+l:"null";if(h==v)return P(""+l);if("object"==typeof l){for(M=p.length;M--;)if(p[M]===l)throw TypeError();if(p.push(l),C=[],j=i,i+=o,h==b){for(N=0,M=l.length;M>N;N++)T=R(N,l,n,r,o,i,p),C.push(T===c?"null":T);L=C.length?o?"[\n"+i+C.join(",\n"+i)+"\n"+j+"]":"["+C.join(",")+"]":"[]"}else a(r||l,function(t){var e=R(t,l,n,r,o,i,p);e!==c&&C.push(P(t)+":"+(o?" ":"")+e)}),L=C.length?o?"{\n"+i+C.join(",\n"+i)+"\n"+j+"}":"{"+C.join(",")+"}":"{}";return p.pop(),L}};h.stringify=function(t,e,n){var r,o,i,s;if("function"==typeof e||"object"==typeof e&&e)if((s=u.call(e))==y)o=e;else if(s==b){i={};for(var a,c=0,p=e.length;p>c;a=e[c++],s=u.call(a),(s==v||s==g)&&(i[a]=1));}if(n)if((s=u.call(n))==g){if((n-=n%1)>0)for(r="",n>10&&(n=10);r.length<n;r+=" ");}else s==v&&(r=n.length<=10?n:n.slice(0,10));return R("",(a={},a[""]=t,a),o,i,r,"",[])}}if(!i("json-parse")){var N,M,j=String.fromCharCode,L={92:"\\",34:'"',47:"/",98:"\b",116:"	",110:"\n",102:"\f",114:"\r"},D=function(){throw N=M=null,SyntaxError()},U=function(){for(var t,e,n,r,o,i=M,s=i.length;s>N;)switch(o=i.charCodeAt(N)){case 9:case 10:case 13:case 32:N++;break;case 123:case 125:case 91:case 93:case 58:case 44:return t=k?i.charAt(N):i[N],N++,t;case 34:for(t="@",N++;s>N;)if(o=i.charCodeAt(N),32>o)D();else if(92==o)switch(o=i.charCodeAt(++N)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:t+=L[o],N++;break;case 117:for(e=++N,n=N+4;n>N;N++)o=i.charCodeAt(N),o>=48&&57>=o||o>=97&&102>=o||o>=65&&70>=o||D();t+=j("0x"+i.slice(e,N));break;default:D()}else{if(34==o)break;for(o=i.charCodeAt(N),e=N;o>=32&&92!=o&&34!=o;)o=i.charCodeAt(++N);t+=i.slice(e,N)}if(34==i.charCodeAt(N))return N++,t;D();default:if(e=N,45==o&&(r=!0,o=i.charCodeAt(++N)),o>=48&&57>=o){for(48==o&&(o=i.charCodeAt(N+1),o>=48&&57>=o)&&D(),r=!1;s>N&&(o=i.charCodeAt(N),o>=48&&57>=o);N++);if(46==i.charCodeAt(N)){for(n=++N;s>n&&(o=i.charCodeAt(n),o>=48&&57>=o);n++);n==N&&D(),N=n}if(o=i.charCodeAt(N),101==o||69==o){for(o=i.charCodeAt(++N),(43==o||45==o)&&N++,n=N;s>n&&(o=i.charCodeAt(n),o>=48&&57>=o);n++);n==N&&D(),N=n}return+i.slice(e,N)}if(r&&D(),"true"==i.slice(N,N+4))return N+=4,!0;if("false"==i.slice(N,N+5))return N+=5,!1;if("null"==i.slice(N,N+4))return N+=4,null;D()}return"$"},I=function(t){var e,n;if("$"==t&&D(),"string"==typeof t){if("@"==(k?t.charAt(0):t[0]))return t.slice(1);if("["==t){for(e=[];t=U(),"]"!=t;n||(n=!0))n&&(","==t?(t=U(),"]"==t&&D()):D()),","==t&&D(),e.push(I(t));return e}if("{"==t){for(e={};t=U(),"}"!=t;n||(n=!0))n&&(","==t?(t=U(),"}"==t&&D()):D()),(","==t||"string"!=typeof t||"@"!=(k?t.charAt(0):t[0])||":"!=U())&&D(),e[t.slice(1)]=I(U());return e}D()}return t},q=function(t,e,n){var r=H(t,e,n);r===c?delete t[e]:t[e]=r},H=function(t,e,n){var r,o=t[e];if("object"==typeof o&&o)if(u.call(o)==b)for(r=o.length;r--;)q(o,r,n);else a(o,function(t){q(o,t,n)});return n.call(t,e,o)};h.parse=function(t,e){var n,r;return N=0,M=""+t,n=I(U()),"$"!=U()&&D(),N=M=null,e&&u.call(e)==y?H((r={},r[""]=n,r),"",e):n}}}p&&(r=function(){return h}.call(e,n,e,t),!(void 0!==r&&(t.exports=r)))}(this)},function(t,e){function n(t,e){var n=[];e=e||0;for(var r=e||0;r<t.length;r++)n[r-e]=t[r];return n}t.exports=n},function(t,e,n){"use strict";var r=n(71)();t.exports=function(t){return"string"==typeof t?t.replace(r,""):t}},function(t,e){"use strict";t.exports=function(){return/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/g}},function(t,e){(function(e){t.exports=e}).call(e,{})},function(t,e,n){var r,o=function(){return r.indexOf(n.h())>=0},i=function a(){t.hot.check(!0,function(e,r){return e?void(t.hot.status()in{abort:1,fail:1}?(console.warn("[HMR] Cannot apply update. Need to do a full reload!"),console.warn("[HMR] "+e.stack||e.message),window.location.reload()):console.warn("[HMR] Update failed: "+e.stack||e.message)):r?(o()||a(),n(74)(r,r),void(o()&&console.log("[HMR] App is up to date."))):(console.warn("[HMR] Cannot find update. Need to do a full reload!"),console.warn("[HMR] (Probably because of restarting the webpack-dev-server)"),void window.location.reload())})},s=window.addEventListener?function(t,e){window.addEventListener(t,e,!1)}:function(t,e){window.attachEvent("on"+t,e)};s("message",function(e){"string"==typeof e.data&&0===e.data.indexOf("webpackHotUpdate")&&(r=e.data,o()||"idle"!==t.hot.status()||(console.log("[HMR] Checking for updates on the server..."),i()))}),console.log("[HMR] Waiting for update signal from WDS...")},function(t,e){t.exports=function(t,e){var n=t.filter(function(t){return e&&e.indexOf(t)<0});n.length>0&&(console.warn("[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),n.forEach(function(t){console.warn("[HMR]  - "+t)})),e&&0!==e.length?(console.log("[HMR] Updated modules:"),e.forEach(function(t){console.log("[HMR]  - "+t)})):console.log("[HMR] Nothing hot updated.")}},function(t,e){function n(){u=!1,s.length?c=s.concat(c):p=-1,c.length&&r()}function r(){if(!u){var t=setTimeout(n);u=!0;for(var e=c.length;e;){for(s=c,c=[];++p<e;)s[p].run();p=-1,e=c.length}s=null,u=!1,clearTimeout(t)}}function o(t,e){this.fun=t,this.array=e}function i(){}var s,a=t.exports={},c=[],u=!1,p=-1;a.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new o(t,e)),1!==c.length||u||setTimeout(r,0)},o.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=i,a.addListener=i,a.once=i,a.off=i,a.removeListener=i,a.removeAllListeners=i,a.emit=i,a.binding=function(t){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(t){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(t,e){t.exports=React}]);
//# sourceMappingURL=data:application/json;base64,